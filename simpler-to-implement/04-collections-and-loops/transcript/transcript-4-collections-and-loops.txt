In programming, you are often dealing with collections. Let me explain what I mean. In our company directory, we may want to search for everyone who has the last name Smith. Now we haven't built search into the application, but just imagine it's there for now. I could enter that last name into the application and get back a collection of employees. Let's say that we had six results. Now instead of giving back six variables, you could have one named employee1, another one named employee2, and so on, instead, we can get back a single collection, and this is one variable that contains multiple items. Now, in JavaScript, we have three primary collection types, array, map, and set. Now, some of these also have some subtypes based on the way that you want to handle the memory side of things, but I won't be covering that in this clip. In addition, we can also store multiple items in a type we have already discussed, objects. Let's start by looking at arrays. An array in JavaScript is an ordered collection of items. It has a length property and methods for manipulating the list. Now, arrays should be used for collections where the order matters. Let's think of a few examples. If we're storing members of a baseball team, the order likely doesn't matter, but if we're storing a list of people in line to purchase tickets to a movie, the order is critical, we need to preserve the place everyone has in line. So let's discuss two terms that we use when talking about arrays. First, an array has a length, I mentioned this earlier. So if we have three items, its length will be three. Next, each item in the list has an index based on its position in the array. Now, these indexes are zero‑based. That means that the first item in the list will have an index of 0, the second will be 1, and so forth. So, let's see this in practice. There are multiple ways to create an array, but I'll use this syntax here, I'll cover more ways later within the module. Using this syntax, we can create and populate an array all in one statement. If we wanted to access a single item from the array, I can use square brackets and pass in the index that I'm looking for. Likewise, if I wanted to see how big my array is, I could check the length property. So if I want to add an item to the array, I can do that using the push method. This will push that item onto the end of the array, and after that, you can see that the length is now larger than it was before. But arrays are not the only collection type. Next, let's take a look at maps. In many ways, maps are similar to objects. On an object, you can have a string key and then an assigned value, as we have seen before. A map is a JavaScript collection type that allows you to use any data type as your key. It has a size property and methods for manipulating the collection. Let's see how we can use it. To create a map, we can leverage the map constructor. From here, we can use the set method to set the key and value for the data that you want to store in the map. To retrieve the value for a key, we can use the get method. We also have the ability to delete a single item from the map using the delete method. Next up, we have another collection type, set. Now, a set in JavaScript is a collection type that allows for a unique set of values. It has a size property and methods for manipulating the set. The keyword here is unique. Within a set, you cannot have the same item more than once. Unlike an array, where you could have the same item at multiple indices, they can only appear once in a set. To create a set, we use the constructor, just like we did with map, and then we use the add method to add items to the set. Even if I add the same item multiple times, you will notice that the size does not increase. So now you have an understanding of the collection types that we have in JavaScript. These collection types are iterable. That means we can loop over each of the items in the collection and perform some specific action on each item in the collection. So, let's go back to the employee search option that I mentioned earlier. Once we retrieve the six results from our search, we would want to display the results, right? So we could loop over that array and log the first and last name of each of those six employees to the console. After we spend the first half of this module diving deeper into arrays, maps, and sets, we will spend the second half talking about loops. I'll be back in the studio midway through this module to discuss what it means to be iterable and demonstrating how loops actually work.
So now that we've been introduced to the concept of arrays, let's dive in and really figure out how they work. But as usual, before we dive too deep into the actual code, I do want to remind you that we do have the documentation that you can leverage on the MDN Web Docs. So, you can follow the link on the screen to get through and review all of the different capabilities that you can leverage when using an array. Okay, with that out of the way, let's dive in to VS Code. So I'm here within VS Code, and the first thing I'll do is to create a new file. Now, here within this file, let's go ahead and start working with arrays. So let's talk first about how we create arrays. Now, in the clip at the beginning of this module, I showcased utilizing this square bracket syntax to create arrays. Now, in this case, we have created an empty array. Now, we could also use the syntax with square brackets and add in items so that we can populate it at creation time. So here we would have an array that has a length of 2. Next, we could go through and create an array using the constructor. So we could say new Array. Now, this doesn't prohibit you from being able to populate it, you can actually pass values in to the constructor as well, so this would create an identical array to what we have for the second array that we defined. So, these are the different ways we can create arrays, but what you're going to want to do after you create an array is access the values. So let me start by creating a new array that's going to hold a list of names. In this case, we'll have David and Kim, Steve, and Katie. So we have four different items that are included within this array. Now, what can we do with this? Well, as I mentioned, we might want to check the length. So, let's start by confirming the length. Now, length in this case should be what? Well, we have 4 items, so it should be 4. So if I run this with F5, we can see that, indeed, it does return 4. Now, to access individual elements in the array, as I mentioned earlier, we can utilize the square bracket syntax, and then we put in the index of the item that we want to retrieve. Now, remember, arrays are 0 index. That means the first item in the array would be at index 0. So here our last item would be at index 3. So here if I go through, I could get the First Name by utilizing 0 as the index. For the Second Name, I could utilize 1. So now if I run this, we should see that, indeed, we have David as the First Name and Kim as the Second Name. Now if I was trying to retrieve a number that didn't exist in terms of the index, let's say I want to retrieve the 10th name. When I run this, I'm not going to get an error, but I am going to get back undefined because this value does not exist within the array. So this is something that we have to account for in our code if we have a specific number of items and we might be trying to retrieve something that is beyond that. Now, there will be times that we need to search for things within an array. We want to know where it is positioned, or if it is even included in the array at all. So here we can utilize the Includes method from the array object to give back a Boolean on whether or not a specific value is included. Now, as a note here, we're dealing with a string which is a primitive. We'll talk a bit later about dealing with objects in this context. So here I'm going to go ahead and run this, and we'll see that since the list does include the name David, this will return true. Let's look at another example here. So here we'll check and see if it includes the name Tucker, which it doesn't, so we should get back false on this. So, let's go ahead and run it and see, and, indeed, we get back false for that value. Now, there's another thing we can do. Instead of just saying is it in the array, we can say where is it in the array. So since we know that David is included in the array, we're going to call the indexOf method on the array object, and here we'll find out what index that's at. And I'll also show you here, we'll do the same thing with Tucker, which, again, is not included, so we should get back something here. We'll talk about what it is when it returns. So let's go ahead and hit F5. We can see that for David, it does return an index of 0, which makes sense because it is the first item in the array. But for Tucker, in this case, it returns a ‑1. Now you can't have a ‑1 iIndex, but anytime you ask for a position of something inside of an array, if it can't find it, it's going to return ‑1. Okay, so let's keep pushing through. Let's talk about how we can add values to our array. And there are some different options here for how we do this. Now, if we simply want to add a name to the end of an array, we can utilize the push method. Tthis will just push a value onto the end of the array. So here in this case, I'm just adding Shannon to the array, and we can see that indeed it is now the 5th item in our list. Now, I also could go through and add a specific value, but do it at the beginning instead of the end because if you remember, I mentioned that with arrays the order matters. That's one of the whole reasons you would use an array. So if you want to change where you're inserting it, if you want to put it at the very big beginning, you can utilize the method unshift. Now, there are two methods, shift and unshift, and in my mind, they're very unclear just by their names what they do. But in this case, I'll tell you if you call the unshift method and you pass in a value, it will add that to the beginning of your array. So we'll run this, and you can see that now we have six items, and Sarah is at the beginning of the list. Let's say we want to do something else. So we want to actually add a value, but do it at a specific index. Well, a lot of manipulation of arrays can happen with the splice method. Here, we're going to use this to just insert the name William at an index of 1. So, if we go through and run this, you'll see indeed that William is now the second item that has been included within the list. Now you can do much more with splice. I won't go through all the specifics here in this clip, but there are several things you can utilize splice for. Now, if we keep going, there's another thing we might want to do is actually remove a value. Let's say we want to take the beginning item off of our list. I mentioned to you before that shift and unshift are both methods that you can use on an array, and this one will just take that value off the front of the list. So I'll go ahead and hit F5, and you'll see that indeed the name Sarah is no longer at the beginning. We've removed it. We have shifted it away from our array. Now, another thing we might need to do is we might need to remove a value, but at a specific index. So if we want to say, okay, at index spot 5, we want to actually remove a name, we can do that utilizing splice. And here we actually could remove multiple values. So if we were to change that second number, which is currently 1, to be 2 or 3, we could remove multiple items at that point in the array. But in this case, we're saying just 1. So if I run this now, you'll notice that the last item in our list, which was Shannon, has now been removed, and we are left with just five items in our array. Okay, let's keep moving forward here. Now, with arrays, arrays don't just have to contain primitive values. They can contain objects as well. So here I'm going to create three different objects. We can pretend that these are three different employees within our directory. So the first one is David Tucker. The second one is Sarah Jenkins. And I've purposefully included here for obj3, an identical object to what we've put in for obj1. Now, with that information, let's take a look at a few things. First of all, we can create an array utilizing our square bracket syntax and passing in both of those objects. But now let me give you a scenario. What would happen if I ran the following code. We're saying employees.includes, and then obj3. Well, obj3 has the exact same first name and last name as obj1. So, what do you think it's going to return here? Well, let me run it and we'll see. Well, the answer that comes back here is false. So in this case, because obj3 is pointing to a different block of memory than obj1, it would return false in this case. Now, if we keep moving forward here, we might want to check, though, and see is obj1, is that included inside of the array? And because we did include obj1 in the array, this one should return true. And indeed, it does. So here we've been able to do a lot of the basics of working with arrays, creating, we have been able to access items within an array, we have been able to add items to an array, remove items from the array, and even work with more complex objects inside of JavaScript's array object.
So now, we're going to get hands‑on and work with maps and sets in JavaScript. And just like with anything we do, I want to remind you that you can get to the documentation. So here, you can see the page for map on MDN Web Docs, and in addition to having one for map, we also have one here for set. So if you want to learn more about the different methods that we have available or the different properties that are available on these objects, you can dive into the documentation to get what you need. Now, let's go ahead and jump over to VS Code. So I'm here within VS Code, and the first thing I'm going to do is to create a new file. Now here within this file, you might say, I know what you're going to do, David, you're going to create a new map, that'll be the first thing you do. Well, you would be wrong. I'm going to start off by creating an object. You might be saying, wait, what does an object have to do in working with maps and sets? Well, let me explain here for a minute because we're going to start off and we're going to be looking at maps, and one of the things I want to point out to you in the beginning is that, really, maps are very similar to JavaScript objects. We have keys and values. So in this case in our object we have keys like FirstName and LastName, and then we have values like David and Tucker. Now, both of those are strings, which are primitives, but we could also put in dates and we could put in booleans, we've done that before with JavaScript objects. Let's talk a little bit about how maps are the same and yet how they're also a bit different. So to create a map here, we don't use this object literal syntax, we do utilize the constructor here to go in and say we want to have a new map, and so now we have a map that's created. And if we wanted to go in and set values, we pass in both the key and the value to the set method. So in this case when we look at these two different values, right, map1 and object, both of these are kind of functionally the same. Now, they're represented within different data structures, but they're both holding the same bits of information. If I were to run this, we could see that it returns, again, our map has a size of two and we have FirstName as a property, David as a value, LastName as a property, and Tucker as a value. So, they're functionally the same, but there are some things we can do within maps that we cannot do within JavaScript objects, and that really centers around having non‑string keys. So if you think about it, in JavaScript objects, we're utilizing string keys for everything. So, even though FirstName, I don't have quotes around that under the object, it is really represented as a string. So here, we can do other things, like let's say we want to do a number key based on the current time, and there might be reasons you would do this if you were actually doing some time series data, for example, that would be one option of something we could do. We could also go in and we could set an array as the key and then have a value. Now notice here all of my values are strings, but they don't have to be, I could put in other data types there as well. We could even utilize a function, and I know I haven't talked about functions yet, so, I'm kind of teasing something that will be coming later within the course, but we could even have a function here as a key, and all of this is perfectly valid when you're working with maps, even though you cannot do this within JavaScript objects. So I could go through and log this out, and you can see that indeed we have our number key that we're utilizing, and we have our array key, and we have our function key, all of these are perfectly valid when working within JavaScript maps. Now, I mentioned to you the size a bit earlier, and I do want to remind you, because if you are working within maps, you will be checking the size periodically depending on what you're doing, so, you can access that property on your map object just by utilizing size. So here, if I run this, you can see, indeed, it does return five, which we also saw in the previous logging statement, but I wanted to point out how you could get to that information. Now let's talk about how you actually get to the data once you put it inside of a map, and I know I introduced this earlier within the module, but I want to really showcase it here. So, we can call the get method and then pass in whatever our key was, right? So in this case, if we pass in LastName, we should get back Tucker. So if I run it, indeed, we do get back Tucker. Now, let's go ahead and look at another example. What if I say map1.get and I pass in an empty array, what am I going to get back? You might say I know, David, you're going to get back on array key. But, no, you actually won't. Let me hit Run and you'll see why. You can see here that we're getting back undefined. Now this is just another point where I'm trying to drive home that any type of object (an array is an object) within JavaScript is going to work differently than a primitive. So, here, if I wanted to get back array key, I would need to actually have a reference back not to any empty array, but that specific empty array that I used to assign it because it needs to have, basically, a reference back to that block of memory when it was created. So, just as a reminder here, even though we can use anything for a key, that doesn't mean we can always get things back unless we're thinking ahead a bit here. So next, let's talk about how you delete values. So here, you can go ahead and delete any value by just calling delete and then passing in the name of the key. So in this case, we'll delete FirstName, and then we're going to go back and actually pull the size, and you can see here that our size has reduced by one, it's now down to four, which makes sense since we have removed one value. Now, that gives us an overview of really the core things you would do when working with a map, so, let's do the same thing for a set. So here, creating a set is almost identical, we're just using a different object name here, so we'll use the constructor to say that we have a new set, and we can go through and add a value. So in this case, remember, we don't have keys and values, we just have values, and they're going to be unique. So here in this case, we have a string, which is primitive, that we're adding into our set, and so, if we were to move forward from this, we could go through and check our size. So here, we'll go through and check the size, it has a size property just like we have on map. So here, I'll go ahead and run this, and as you would expect, our set size comes back as one because we have only added in one value. And if we were to try to go add the same value in, and again, the same value here as it's equal to a previous value that's already in the set, and since this is a primitive, any string we enter that says David, that it has the same case to it, should be the same. And so here, because we've added it, if we went through and logged out the size, we should see that the size is exactly the same as it was before because it didn't add anything new into the set. And indeed, it does come back as one because we're trying to add the same value again. But just like we talked about with when dealing with arrays, we don't have to just have primitives inside of these collections, we can put complex objects inside of maps and sets and arrays. So, let's pretend that we're doing a collection of employees as a team and we want to create this as a set because it wouldn't make sense for the same employee to be on a team multiple times, it would have different employees. So here, if we wanted to do this, we can create an object that represents our employee, and I'm just going to create one here for simplicity, and we'll do the same thing that we've done before, we'll have an object here that has FirstName and LastName. I can actually add that into the set, and here, we'll check the size of the set. So if I go ahead and run this, we'll see our set size is, indeed, one, and we have our one complex object included inside of that set. Now, we also can detect if we actually have a value inside of the set already, and we can utilize the has method to do this. So here, we can check and see if our team has this particular employee. Now, I can do this because I still have a reference back to the object that I originally put into this set, so I'm going to say does this team have, you know, employee one that I've created here with this JavaScript object? And before I run that, I also want to show you that we can actually remove values from a set as well, we can call the delete method on our set and we can remove it. Now again, this works just like I said with the previous statement because I have a reference back to that original object that I put in. So, let's see these two values that get logged out. First of all, if it says, do we have this employee, it's true, because it does indeed contain that employee, but our set size here comes back as 0 because right after that we actually have removed that from our set. There's one last thing I want to mention that you can do. There may be times when you don't want to just delete one item from a set, but you truly want to clear the entire set out and start again. So in that case, instead of creating a new set, you can simply call the clear method, which will remove all of the values within that set, and then you can immediately go back and start adding more values in.
At the beginning of this module, I introduced the concept of loops, so I want to dive into that a bit deeper before we start implementing them within our application. Now I mentioned that we can use loops to iterate over a collection, which means we perform the same logic on each item in the collection. Now while this is true, it isn't a complete definition. In JavaScript, a loop executes a block of statements until a specific condition is met. One such condition could be reaching the end of a collection, but it also could be any other conditional that you can think of. There are two primary keywords that we leverage when using loops, for and while. Now each of these have multiple types of loops that I will introduce in this clip. First up, we'll discuss the while loop, which is the easiest loop to create. In this example, we start with the number 10. Next, we use the while keyword to define our loop. Just like the conditionals with if, we will define a block using curly braces that we execute each time our loop fires. Now we need to add our conditional. Here, we will say anytime the value of x is above 0, we should run our loop. So within the loop, we will log the value of the number and then decrease the value of x by one. So if we ran this code, we would see it log 10, 9, 8, 7, and so forth until we get down to 1, which would be the last run of our loop. Now let's change things up a bit. What if we wanted to check for the value of x at the end of each execution in the loop instead of the beginning? Well, in that case, we could use a do‑while loop. Here you can see that I've changed things around by using the do keyword. It works in the same way, but it just changes where the conditional is evaluated. This also means that a do‑while loop will execute at least once since the conditional isn't checked until later. Next, let's discuss for loops, which are the most common loops that you will encounter. Now we'll talk about three different types of for loops. So first, we have a plain for loop, a for‑of loop, and a for‑in loop. First, we have a plain for loop. Now, trust me, this isn't as scary as it may seem at first glance. To define a for loop, you need to have three statements that you can add as arguments. First, you have an initialization statement. Now you often use this to create a count variable. Next, you add in the condition that you're checking. Finally, you have a statement that will be executed after your code block on each iteration. So, in this example that I have here, it would loop over all the items in the array. The counter variable gets used to access each item by its index in the array. Now we also could use a for‑of loop for this. If we were only concerned with the items in the array, a for‑of loop is much easier to understand. Here, we create a variable, in this case, val, which is short for value, and then specify the array. Our block will execute once per item in the array. Finally, the third option for the for loop is the for‑in loop. Now here, if we have a JavaScript object, we can loop over the keys in the object. So here we define a variable, in this case, key, and then pass in the object. The block will execute once per property in the object. Now I know that you're excited to take your knowledge of loops and jump right in, but we need to discuss one additional topic, loop control flow. First, what happens when you're in a loop, and you want to stop the loop and move on to the next statement in your code? This brings us to the first keyword. The break keyword allows us to terminate the loop and move on to the next statement in your code. But let's take a look at another situation. What if you just want to stop the current execution of the loop and skip ahead to the next execution? Well, the continue keyword stops the current execution of the loop and proceeds to the next iteration. Okay, now that you have that information, let's jump right in and work with loops.
So now, we're going to dive in and get to work with our first loop type, which is a while loop. And while we looked at this earlier in the module, now we're going to get to dive in and actually work with the code, and just like with most everything else we've discussed here, I do have a link to the documentation where you can go to the MDN Web Docs and learn more about while loops beyond what we're talking about here. But, let's go ahead now and jump in to VS Code. So here within VS Code, I need to talk to you about two files before we create the file that we will be using within this clip. First of all, I have a package.json file. Now we've utilized this before to define some dependencies, and we'll be talking a lot about dependencies and modules later within this course. In this case, I'm defining one here so that Node.js knows that we want to treat our JavaScript files as modules because we're going to be using the import statement. Now, you might say, well, why are we using the import statement? We don't have any dependencies defined here. Well the reason is we'll be using that to pull in our data.json file. Now this file just contains some sample data for us. It includes an array of employees that we're using again for our sample employee directory that includes an ID, an email, first and last name, date of birth, start date, and then isActive flag, which is a boolean. And so here, we want to actually pull this in so we can work with this data inside of our loops. So I'm going to show you how well do that, but for now, I'll close this file and we'll create a new file. Now, here within this file, I'm going to show you the code that we will use to actually bring in this JSON data. So here, it's going to be an array of complex objects, we'll use the import statement, and we're going to specify that the contents of this JSON file will be included in that employees variable. Now, I'm going to go ahead and tell you if I hit F5, you'll see here that we get a warning back from Node.js. This is what's called an experimental warning. It's telling you that in essence, you might need to do this differently in the future even though this works now. Now I'll be showing you some different ways to pull in JSON data later, so you don't need to worry with this, just know that as we go throughout this module, you will see this warning and that's totally okay. So, let's go ahead and move forward. So, let's go ahead and look at how we would loop over some of this information, utilizing a basic while loop. So I'll start off by creating an index variable, we'll just call this i, and in many cases you'll see people use i for this or other letters like j and k, we'll usually see single letters for this. But then I'm going to go through and utilize the while keyword, and we're going to say here that while employees, and then we're including that index value inside of the square bracket syntax, meaning that as long as there is a value in the array at that position and it doesn't come back as undefined or null, then we want this loop to continue. Now in this case, it's going to loop over and it's going to basically include all of those names and it's going to output them to the console. So, let's take a look at that in action. So I'm going to go ahead and hit F5, and when I do, we can see that we get all of those names out, and there are nine different values that are included here. Perfect, that works well. However, I need to talk to you about something that can happen when you're working with loops. Now the way this loop works is after each log statement where we're logging out the employee's name, we then increase that index value by one. So, when it runs through the first time it's 0, and then it's 1, and then it's 2, so on and so forth. Well, what happens if you make a mistake? Let's say, for example, that you create a loop and you forget to add in this statement. Well, here's the problem. Every time this loop runs, that value is going to be 0, and so it's going to keep running, and this brings us to a condition that we would call an infinite loop. So, let me go ahead and show you what would happen here because I don't want you to freak out if this happens when you're working with your JavaScript code. So I'm going to go ahead and hit F5, and it's just going to start running repeatedly. I'm immediately going to try to hit this stop box here for the debug controls, but you can see that by the time this finishes, this one statement was logged out 59,786 times, and the reason is because we basically told it to loop, and that condition is always going to return true. So, we do need to be careful when we're working with loops that we don't end up with infinite loops. If it happens, no big deal, just do what I did, hit the stop button on the debug controls, and it should actually exit you out of that particular running file. Okay, so, with all that said, we've seen that this can work utilizing a while loop, but let's also take a look at another kind of loop that is a type of while loop, and if you remember from earlier in the module, it is a do while loop. So here in this case, we're first going to do a little separator so we can tell the difference between the output of our while loop and our do while loop, but then, I'm going to go ahead and define this loop. I'll update the index value to be 0 again, which is what it was initially before, and then we'll say do, we'll use the do keyword and then we'll define our code block, which in this case we'll have a logging statement just like before. And, also just like before, we'll increase the value of that index by one, but we're going to put the conditional at the end. We'll check to see if there is a value that is included in that employees array at the specific position once we've moved that number up by one. So now, if I were to go through and hit F5 and run this again, we'll see that we get the output both from our while loop and then we get to that separator, and then we can see we have the same output for our do while loop. Now, I'll tell you, while loops are very useful, and you'll use them a lot, especially once you move more into working with functions, which we'll cover in the next module. But, the next type of loop that we cover, which is going to be the for loops, I think those are going to be even more critical for you to learn. So, without further ado, let's go ahead and take a look at for loops.
So now that we've covered while loops, we're going to move forward and take a look at for loops, and I think these are going to be even more common for you in your JavaScript development. I think it's something that every JavaScript developer needs to know well. And we're not just going to cover one type of for loop, we're actually going to cover three here within this clip. And just like with everything else we talk about, I do have a link here to the documentation for for loops. Now this is going to take you to just a plain for loop, but if you look on the left pane, you can easily get to the for...in and for...of loops as well, which we also will be using here within this clip. Okay, now that we have all of that out of the way, let's dive in to VS Code. Okay, so I'm here within VS Code and I'm first going to create a new file. Now here, before we start bringing in that JSON data and working with it like we did in the previous clip, I'm going to start off here with a simple array. It just has four string values. Now, what we need to do here is talk about how we actually create a for loop. And if you remember from earlier in this module, you have to define three different statements as you create your for loop. So, let's take a look at this in action. So here we have our for keyword followed by our three statements, and then we have our curly braces, and then we have whatever we're going to execute with each run of the loop, but let's break down these three statements in detail. So first of all, where I am saying let i = 0, this is the initialization statement that will run before our loop executes for the first time. Then, we have our conditional that will be checked after each run of the loop. In this case we're going to check to be sure that our index variable, or i in this case we're using, but you could use any variable name that you want, we're checking to see if this is less than the length of our names array. And then finally, we have a statement that will execute after each run of the loop. And in this case that statement will add one to the value of our i variable, or our index variable. Now again, we'll commonly use this variable as an index, although you certainly don't have to, but as a new developer, this is the most common pattern that you will see. Now, let's go ahead and take a look at the results of this for loop. So if I run this with F5, I can see here that it does indeed return each of the four names. Now the reason that it doesn't keep going is because of our conditional. In this case it knows that if it exceeds the length of the array, then in that case it needs to stop running the loop, and so that would actually take us to whatever our next statement would be. So, this is just a basic for loop, and I know that it seems a little daunting at first, having to define those three different statements, but you can take this pattern that you see here on your screen and use this to loop through any array that you have. But there are other ways to do it as well, so let's take a look at a different approach. So here, we'll utilize a for...of loop. Now if you have an array, you can simply say for and then you can say the variable that you will use to define the specific item of the array for each run of the loop. In this case we'll say name and then you use of and then you'd give it the name of the array, which in this case is going to be names. So we can say name of names and then we can simply log out the name. Now, in this case, you don't have to remember nearly as much for how to define this particular for loop. So if I run this, and I'm going to go ahead and hit F5, we'll see that we get the exact same result. Now, there's a lot of different articles out there about performance between these two different options. I'm not going to talk about that here within this course, but just know if you're looping over an array, either of these approaches will work. You will notice that there are some differences. First, if you need to access the index, in other words, what run of the loop you're actually on, you might want to use the first approach. There is a way you can do it with the second approach, but it's a little bit more complicated. But I'll go ahead and tell you, we're also going to cover a way that you can loop over the items in an array or other different types of iterable data structures, but we're going to do that utilizing functions in the next module. So, again, we'll learn even more about how we can do this then. Let's keep moving forward with this. Let's go ahead now and let's pull in the data from our JSON file, like we did in the previous clip. So in this case we're going to bring that in as the employees variable, just as we did before. Now, what I want to show you here is another type of loop, and that is going to be a for...in loop. So here, what I want to do is I want to grab just one employee. So we'll grab the first employee that actually is included in that employees array. Now what I'm going to do now is I'm going to loop over all of the different properties in that particular object, and we use a for...in loop for that. So here, you can see how we actually structure this. We will include a variable that gets defined, which is property, and that will be defined for each of the properties included within that employee object. So then I can pull that out and I can use the property name, both to actually log that out, but also to get that particular value out of that employee, utilizing the square bracket syntax that you can see here. So now, if I were to go in and actually run this, I would be able to see all the data we have for this one employee. So let me go ahead and do that. I'm going to go ahead and hit F5. Now here, you'll see that we have our id, we have our email address, our first and last name, date of birth, start date, and isActive value. All of that has been defined and we can access all of that using our for...in loop. Okay, now we're going to do something a little bit interesting here because we're going to bring these concepts together; however, to make it easier to actually read this in the Debug Console, we need to go in and just add in a bit of a separator here. So I'm going to have a multi‑line separator here that will clearly distinguish what we did earlier in this file from what we're getting ready to do. So what I want to do here is I want to do what we just did, in terms of looping over all the properties for an employee, but I want to do that for all of the employees, not just one. So to do this, we're going to mix our for...of and for...in loops. We're actually going to nest our for...in loop inside of a for...of loop. So let's take a look at what this would look like. We're going to actually bring both of these approaches together. So we're going to start off by saying we want to loop over the employees. Then we're going to say that for each of those we actually want to loop over all of the properties. And then to make sure that we have some level of separation within this output, after we go through all of the properties for a single employee, we then will include these two dashes. That way we can clearly distinguish one employee from another. So, now that I have that in place, let's go ahead and hit F5. And here you can see the output. We can see that we're out putting all the data for each of the employees and we have that little two dash separator between each of them. So if we're wanting to output the information in a list of employees, we can utilize this for...of and for...in loop together and show how we can loop both over the contents of an array, as well as over the different properties included with a JavaScript object.
Now, up to this point, we have been working under a few assumptions. The first assumption is that we always want our loop to execute all of its iterations until that condition turns to false. The other assumption is that we always want our loops to execute all of the statements that are contained within them. However, there are situations where we might want to do something different with one or both of those assumptions, and that leads us to loop control flow, and that's what we're going to cover here within this clip. So, let's just dive right into VS Code. So here, within VS Code, I'll create a new file. And then I'm going to go ahead and pull in the JSON data, just as we've done previously. Okay, let's talk about a few different scenarios where we might want to do something different than those assumptions that I mentioned earlier. Let's say, for example, that we want to list out our employees, but we only want to list the first five items from the array and not all of them, which, in this case, would be nine total. Well, we can go ahead and have a normal for loop. And I should mention there are multiple ways that you could accomplish this. So if you've been paying attention, you might have noticed some other ways you could do this too, and that's totally fine. But here, what I'm going to do is I'm going to utilize a loop control flow statement called break. So here, if you notice, inside of our for loop, we have an additional conditional that we have added in. In this case, we're checking to see when that i value, or index, is equal to five. In this case, that would mean that we have already output five items, and we would be starting the sixth, and here we're saying break. Now break tells us to totally break out of the loop, meaning that we won't have any more executions of this for loop, and it will immediately move to the next statements that we have defined. So here this would enable us to list just those first five items and then break out. So if I hit F5, we can see that it indeed does do that, it lists those five items out, and then it stops. But that's just one scenario here. Let's look at another scenario because maybe we don't want to break out of our loop completely. So let's go ahead and add in a separator, and then let's look at the scenario where we want to search only for people that have first names that start with the letter B. Now to do this, we don't need that index value, so I'm going to use a for‑of loop. We'll iterate here over all of the employees, and we'll check to see if a given employee's first name does not start with the letter B. And in this case, we're going to use the other loop control flow statement that we're going to learn about, and that is continue. Now continue means that we're going to stop the current iteration, but we will immediately move to the next iteration. Now you would use this in scenarios where we don't want to go through all of the different lines of code that we have entered in within the code block for our for loop. So in this case, if I were to run this code with F5, we can see that it only lists out the two employees that we have whose first name starts with the letter B. So for all the others, it never reached that console.log statement because of continue. Now there is another scenario that I want to talk to you about, and that is when we're dealing with nested‑loop control flow because things can get a little bit tricky here, but there's a concept I want to teach you that'll make this quite a bit easier. So if you remember, we utilized code very much like this to list out all of the employees and then all of the properties within those complex objects within a previous clip. This was kind of like listing out our employee directory. And so what we did was we started off with a loop over all of the employees, and then for each of those employees, we went through, and we actually looped over all of the properties within those complex objects. Now, here's what I want to do. Let's go ahead and look at the data first, and this will make a bit more sense. So here within the data, you can see that we have an id, email, first and last name, the date of birth, the startDate, and then the isActive flag, which is a Boolean. Now, in this case, once we get to date of birth, we don't want to list any more properties. We just want to list id, email, first and last name. So we're going to do this utilizing a continue statement. So we're going to detect when we're looping over those properties that we get to dateBirth, and then we'll say, let's just continue on to the next run of the iteration. But I'm going to go ahead and tell you, it's not going to work the way we have planned just yet. But I'm going to go ahead, and I'm going to run this code with F5, and you'll notice here that, indeed, it doesn't list out the date of birth, but it does list out startDate and isActive. Now the reason is because when we call the continue statement in this case, it's going to take the closest loop, which, in this case, is going to be that inner for loop, the one where we're looping over the different properties. So here it's just continuing to the next property. But what if you want it to continue here to the next employee? Well, this is where we can utilize something called labels. So here, I'm going to give a name to that outer for loop. We'll call this one Employee. And then what we can do with our continue statement is we can actually specify that we're wanting to continue for that loop, not for the inner loop. So here, by utilizing these labels, we can more clearly specify when we say continue or break what we're referring to. So now, if I were to go ahead and run that code, we can see that it now indeed does work how we intended, where it's just listing out the id, email, first and last name because we're utilizing the continue statement, and we're specifying we want it to continue on that outer loop. And so here's how you utilize the continue and break statements and how you can even utilize them within nested loops.