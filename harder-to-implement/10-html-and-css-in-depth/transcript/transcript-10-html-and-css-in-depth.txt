Course Overview
Hello everyone. My name is Gill Cleeren, and welcome to my course, Building Websites with HTML and CSS. I'm the CTO of Xpirit Belgium. The web is a magical place filled with billions of websites. No matter how simple or complex the website is, each page on the web is built with HTML, the cornerstone of the internet. HTML is a markup language that, together with CSS, allows developers to create modern websites used by billions of users every day. This course will teach you how to build a full website with HTML and CSS. You'll learn the basics of the HTML language, create your first page, bring in images, add navigation and links, and learn about tables. You'll understand about the HTML content model and will see how to bring in styles using CSS. Some of the major topics we will cover include learn the HTML syntax to create webpages, create a welcome page with text, images, and navigation, understand semantic HTML elements to create a common page structure reusable for many other pages, bring in support for styles using CSS, create links between different pages and add bookmarks, and improve your website by adding some basic JavaScript. By the end of this course, you will have a good understanding of HTML and CSS, and you'll have built a real‑world website. No prior knowledge is required before taking this course. I hope you will join me on the journey to learn how to build websites with HTML and CSS with the Building Websites with HTML and CSS course here, at Pluralsight.

Understanding What You’ll Learn in This Course
Module Introduction
We use HTML every day. When we buy a book in a web shop, that shopping site uses HTML. When we rent a car, the interface is built using HTML, and we use our web mail again, lots of HTML. Indeed, every website we use is using HTML. HTML is the language of the web. Are you interested in learning how to build websites with HTML? Well, it must be your lucky day. Welcome to this Pluralsight course called indeed, Building Websites with HTML and CSS. Over the next few hours, you will learn how to create a real‑world website together with me. How cool is that? And before I forget, let us properly introduce. My name is Gill Cleeren, and I will guide you in learning HTML and building that awesome first website. This module is a very short one. I have just a couple of things I want to show you, all basically aimed at getting you started on the right foot. We'll look at the website we will be building in this course, and I will show you the setup I'm using so that you can follow along easily with this course, which I totally recommend you do. This course is created using what is often referred to as HTML, but is now known as the HTML Living Standard. HTML isn't evolving a lot and is pretty stable. We're also using CSS, and technically, that is CSS3. As editor, I'm using Visual Studio Code. As that, HTML nor CSS are evolving a lot, so unless you're using a very old browser, you'll be fine with a recent browser to follow along with this course. This is an introduction course to building websites with HTML and CSS. You will, if you follow along and do everything I'm doing, build together with me a fully‑working website with HTML and CSS. It'll even contain some JavaScript by the end of the course. I think learning how to develop your own website in HTML and CSS is an awesome idea. You may have seen that there are a lot of websites out there that offer the ability to set up a site in a few minutes based on some prebuilt templates or using AI‑driven tools nowadays. While those can do a great job, learning how to do it yourself will empower you to build what you really want. Learning about HTML and CSS is the first step in this process, and it will get you on your way in becoming a web developer, but wait, a full site in a single course? Yes, but don't I have to know HTML and CSS then on beforehand? Well, that is a no. No prior HTML or CSS knowledge is required. This is where you will start. I will explain you all you need to know while we build the site. Although I don't expect any prior knowledge of HTML nor CSS, it is recommended that you have a basic understanding of the concepts of programming. We have a fantastic resource called What is programming here on Pluralsight that will give you the needed insights. The link for the course is shown here. I will expect for this course that you have an understanding of these principles. To get the most out of this course, I recommend that you follow along with everything I'm doing in this course. There's really no better way to learn about your development than building a site yourself. I'll be showing you step‑by‑step what you need to do. You'll need to download the exercise file that come with the course. Those will contain the images we will be using, as well as some other helper files that I will refer to later in this course. Also, the complete code for every module is included there. At this point, go back to the course page for this course on the Pluralsight website and click on the exercise files link. Oh, and before I forget, if you have any questions about this course, please visit the Discussion tab. I will do my best to answer all your questions as soon as possible.

Understanding What We Will Build
So, what will we be building then in this course? Great question. My answer: a full website. You may be thinking, okay, this will be one of those so‑called sites, right? I will definitely not be building a real site. Well, allow me to explain. Together, we're going to work on the website for a customer of ours, Bethany. Bethany bakes the most delicious pies right here in Belgium where I live. Oh yes, we Belgians, we love our pies. And this is Bethany. Nice to meet you, Bethany. Bethany wants to be able to present her selection of pies to her customers through the website. In today's world, every business needs to have a presence on the internet and Bethany's Pie Shop is no different. So what we, that's you and me together, are going to do is building a full website for Bethany's Pie Shop, and for that, we'll need to use our HTML and CSS skills. Those, you're going to pick up throughout this course. So over the course of the next few modules, we will build several pages for this site. We'll start with the home page, so the page that our website visitors will see when they first come to our site. Then, further in this course, we'll add the Pie overview page which lists Bethany's catalog of pies, as well as the detail page for a single pie. We'll bring in a contact form. We'll add navigation, such as a menu, and we'll of course, create a fancy layout too.

Demo: Looking at the Finished Application
Curious to see the site? I bet you are. In this first demo, we'll take a look at the finished site exactly as it will be by the end of this course. So let us together look at the finished website. I'm going to ask you to follow along and do what I'm doing. First, go to the course page and download the exercise files. Once you have downloaded them, you will get a zip file on your local machine, extract that on your machine. You then have all the files, and per module in this course, you will find a folder. Now, go to the m13 folder, that is the last module, and in there, you'll find the finished website that you'll be building in this course. Now double‑click on the index.html and that will open a browser showing the finished home page. So on this home page, we see an image, some text, some promotions, and also some contact information at the bottom of the page. Here on the left, we see the logo, some links, and also at the top, we have a navigation bar with some more links. Let's click on Pies here at the top, and then we'll go to the overview of all pies currently available from Bethany's Pie Shop. We can then click on the View details to see more about the apple pie. So now we see a larger image, and we have the ability to save this as a favorite. Also see the description, the steps to create this pie, and some ingredients. Next, we can click here on Contact, and then we'll get a contact form. Using this form, we can contact Bethany, for example, about an order. Finally, we have the About page here which will contain an embedded video, so this is what you will be building together with me in this course. Let's get started.

Required Tools
Before we continue, we should make sure that you are all set up and have everything on your machine to get to work. To write HTML, you'll need a text editor. In this course, I will be using Visual Studio Code as the editor to create our website. Other editors, of course, will work too, so if you prefer another editor, feel free to use that. You can get Visual Studio Code for free from here. Also, to run and test the site, I will be using the Live Server extension, one of the many extensions available for VS Code. I will show in the upcoming demo how to install this. Of course, we're building a website, so you'll need a browser too. The operating system you are using does not matter at all. HTML is the same everywhere, and VS Code also exists for every platform.

Demo: Setting up Your Environment
Now let's take a look at how to get your machine ready to follow along with this course. For this course, I will use Visual Studio Code as my editor, and it's available for free from code.visualstudio.com. Select your operating system here and then go ahead and download a copy for your environment. Once Visual Studio Code is installed, go ahead and open it. And in Visual Studio Code, we'll need to add an extension. Code has a lot of extensions that you can add to optimize your environment. Click on this little icon here that says extensions in the left menu bar, then you go to the marketplace for extensions and search here for Live Server. Click on Live Server to install it inside Visual Studio Code. The final thing I want you to do at this point is go to the File menu and make sure that Auto Save is enabled. I hope you're excited to dive into this new adventure and you feel ready to get your hands dirty. Let us move on to the next module where we will learn about the basics of HTML while setting up the page structure.

Setting up the Page Structure
Module Introduction
I'm glad you are here. Welcome to this module of the Building Websites with HTML and CSS courses here, on Pluralsight, called Setting Up the Page Structure. In this module, you'll start creating the foundation of every HTML page you'll build, and basically, it is the exact same foundation just about every page on the web is built upon. I have two topics planned for you in this module. In the first part, I will explain you the basics of HTML itself. What is it? What are the basic syntax rules. That's all foundational knowledge you really need. Then we'll open that editor we just installed and get started writing code. We'll create the aforementioned page structure for your HTML pages.

Understanding HTML
Before we start using HTML to build our site, it is definitely a good idea to get some more understanding on what HTML is really all about. Let's start with that here. Using HTML, we can create the structure of a web page. Think about a website which contains text, images, links, and more. With HTML, we are writing the code that defines which text will be the header of the page. What you see on the left is the HTML, and on the right is the result. The browser has interpreted our HTML, and it will display the result. We can include plain content paragraphs, again, rendered by the browser. We get an HTML, specify that you want to include an image, possibly including how large it will need to be displayed. We can include HTML code to create a link which is understood by the browser and rendered as a clickable link. Using HTML code, we can define the structure of the web page we want to create. The browser understands this code and will show the result. HTML's focus is definitely the content of the web page and its structure. HTML code shouldn't be bothered with the actual appearance though, so things like colors, fonts, and so on. That is the goal of CSS. Although we are writing code, HTML isn't an actual development language. It is known as a markup language. Indeed, if you look at the full name of the language, HyperText Markup Language, it indeed says that it is used for markup. The hypertext part points to the fact that we can create hyperlinks between different pages of our site. When we create an HTML file, the file extension should be .htm or .html. The actual HTML code inside that file is just readable text, so it's in fact just a plain text or ASCII file, and we see an HTML file, double‑clicking it will open the browser that will show the result. However, when I open that file using Visual Studio Code, the HTML code is shown, and as you can see, it is human‑readable text, just any editor, even Notepad can open and display the HTML code. The latest version of HTML, so basically what you and everyone else is using, is HTML5, officially released back in 2012. Some smaller revisions, basically, additions have been made over the years as well. HTML5 is basically the fifth and last iteration and little to nothing is changing here. That is why HTML5 as a name isn't often used anymore. Instead, we now talk about the HTML Living Standard, which is the current specification maintained by a consortium of large browser vendors, including Microsoft, Apple, and Google. Each HTML page is built with the same building blocks. HTML pages will basically contain elements, lots of them actually. These elements can be all kinds of different types, including images, tables, adder, and so on. We'll see quite a few of these in this course. Instantiating such an element is done using a tag. Most often, elements will have an opening and then closing tag, and in between them, text. If it sounds a bit confusing, don't worry, but let's look at an example. If you're on this slide, you can see an HTML element. It's in fact a heading that can be used for a title within the page. The element contains two h1 tags, the opening and the closing tag. A tag is used to indicate the start and the end of the element, so in our case, the heading. The type of tag that is used defines which element we are creating. Note that the closing tag starts with a forward slash to indicate that this is, in fact, a closing tag, and between the tags, we'll actually place the text. Here, the text will actually be shown as a heading. The result of this tag is what you see here. The text is now shown as a title. The browser looks at our element, understands the tags, and renders it correctly. The browser, of course, plays a crucial role, it needs to pass the HTML code and it will render that. Throughout this course, you will see this type of slide popping up. Every time, it'll contain some key takeaways, maybe pointing out to something you may have missed. Well, first takeaway, HTML uses angle brackets everywhere. Tags will be surrounded by the less than and greater than symbol, and as mentioned, the closing tag will always contain a forward slash. Is a page just really a list of elements then? Well, yes and no. A typical page will contain lots of elements, but not all just sequential. Instead, elements will be nested. Take a look here. We're using a div here. That's a block element typically used for layout purposes. We'll learn about it later, but for now, notice I have another heading element and it is inside the div. So when I now position the div somewhere on my page, the contained heading will follow along. A typical web page will contain lots of nesting. Nesting will go deep into web page and that is okay. You indeed are limited. You can see I have now three levels of nested elements. Don't worry about the elements you see here, we'll learn about them later in the course. One thing to keep in mind here is that you'll always need to make sure that you don't forget about the closing tag. Otherwise, your browser rendering the page won't know where an element ends or where a new one starts. Another quick takeaway. Have you noticed in the limited amount of code we already saw that I have used all lowercase? Good. I'm glad you noticed. Now to be clear, it is a convention to use all lowercase when writing HTML, although it doesn't matter. HTML is case insensitive. Elements indicate what we want to create like a header or an image, but you also will need extra information on that element, and that we can do using extra properties on the element. For example, when we are creating an image element, we'll need to let the HTML know which image it should be showing. That is extra information that we can, or should I say, must pass to the use of attributes. Here on the slide, you can see how to do this. I can use the src attribute, so src is the name of the attribute I'm using. Those are, of course, predefined HTML knows about these. Then we need to pass a value. So in this case, that will be pie.jpg, the image I want to show in my page. I have another attribute that I added here, namely the width attribute, and thereto I'm passing a value. You will be adding attributes pretty much all the time. HTML elements can, but don't need to have attributes. It all depends on the element really. Headers, for example, don't have attributes often. Whereas, like I just mentioned, an image element will need to have an attribute pretty much all the time. All attributes should be placed within the opening tag, and if we have multiple attributes, we need to separate them from one another using a space. There should, however, not be a space between the name and the value that you hopefully already noticed in the limited code we saw in the previous slide. And just like what we saw just a few minutes ago also applies here. Attributes are case insensitive, but mostly we'll use all lowercase. Enough theory. Now that you know what HTML is and that you have seen the basic building blocks, I reckon the best way to really learn about HTML is by actually using HTML. And for now, that's exactly what we will be doing.

Creating the HTML Page Structure
As the title of this chapter was already giving away, we should end this module by understanding the base page structure of an HTML page. Pretty much every web page will follow this structure, and so all the pages we'll create in this course will do so. See it as a template for an HTML page containing always the same basic elements. Let's explore how we can create this structure. Any HTML page will start with a doc type declaration that is used to indicate indeed the type of document that we are working with. We will be creating HTML page and thus the doc type will be HTML. It could not have been any simpler. Setting the doc type tells the browser which standards need to be applied. Rest assured this will be almost always just HTML as the value. One more thing, while I can also write this in lowercase, the convention is writing this in uppercase. Again, both will work fine though. The next block is where all the action will happen, the HTML element. All content that we will be writing will live between this open and closing tag. Optionally, we can specify here the length at we then set it to the language of the page. This can be useful for screen readers since this way they understand the language of the document. Now, within the HTML tags, there are two important blocks, hat and body. Let's start with the hat element. This is a required part of your HTML page which can contain several pieces of information of our page. You can compare the head of the page with your business code. It contains vital information about the page itself. In the head of the page, we will add one or more meta elements. Meta elements are used to specify additional information about our page, such as keywords. We will see this in the upcoming demo. One meta element is required, and it is the charset meta element as you can see here. It is used by the browser to set the correct character set. It's typically placed as the first meta element within the head. Another vital piece of information that is required to be in the head is the title element. This is used by the browser to display the title of the page as you can see here, as well as by search engines to display in the search results. It should contain a decent description of the contents of the page. Any web page can and should have just one title between the title text. We can only use plain text here, by the way. Within the head element, we can place, in fact, several elements, and I'm listing them out here. We've already seen that we can place a title and one or more meta elements. Other typical elements we'll use in the head are the link, style, and script. Link is used to reference another file, such as an external stylesheet. We'll use stylesheets later on to place style information in a central location for our pages. Script is used to contain JavaScript code, and we'll take a brief look at this by the end of the course. For now, remember that in the head element, we can nest these elements. The final, and probably most important element in the page template, is the body. This is where all our visual content will go into. That is, of course, where we will write our markup code as well starting in the next module.

Demo: Creating the Page Skeleton
Time to fire up that editor. In this demo, we are going to create a page structure together in Visual Studio Code. And let us now start building a website, and it's going to contain a couple of files, so we should place them in a folder. Now, Visual Studio Code actually bases itself out of folders, so we'll go ahead here and open a folder where we'll place all the code. I'll create a new folder here called BettanysPieShop. I'll select that folder, and we'll place all the files that we'll build inside of this folder. So now, we'll create our first file here. So let's click here on the New file button and name that file index.html. Index is a known file to basically any web server. It is the file that will be served by default when you browse to the website, so for example, to bethanyspieshop.com. Notice also that the extension is .html, but it could have been .htm, both would work fine. Now we're staring here at a blank page, so it's time to start writing some HTML code. The first thing that we need to include in just any HTML file is the doc type declaration. It must be the very first thing that we write in our HTML page before the actual HTML code. It is, in fact, not even an HTML tag. It is only used to let the browser know what version this page has been written in. As you saw, Visual Studio Code will help you quite a lot. It already suggested that type doctype here, so we write DOCTYPE html, and now the browser reading this file later on will know that we are writing HTML5. Then the next tag that we're going to write is the html tag. Notice that we are also using angle brackets here, and then we write the html element. You have the opening and the closing tag, and the closing tag can easily be recognized by the use of the forward slash. All the code that we will be writing on just any HTML page will go in between these two tags. The number of spaces or enders or line breaks that I'm writing between the opening and close tag does not matter at all. It is not used in the final layout of the page. Now the HTML page will contain two important elements itself, the head and the body, and let this first start by including the head. As the name is giving away, the head will include all the header information. This will include things like the title, meta tags, and so on. So one of the first things that we are going to include is the meta charset. Now this is not really going to do a lot for your page, but it defines which encoding your HTML has used. It is, again, pretty much internal stuff. More importantly, and in fact, the only visual element in the head is the title of the page, and the title element allows us to place content between its open and its closing tag. This title will be used by the browser to show in the tab or in the window. Other information we can put in the head is the following. Let me paste that in. For example, I can include the author, a description, and the viewport. The author, well, that's quite simple. That defines who has created this page. The description is used to, well, describe the page, and the viewport will become more important once you start making websites that need to have a responsive layout. Now what I mean by that is a layout that looks great on all types of devices going from very large monitors to small mobile screens. Creating responsive layouts goes beyond the scope of this course, but we have other courses here, on Pluralsight, that will explain you how to do this. Nevertheless, setting this meta tag here is a good place to start. By the way, you may have noticed that my code has shifted a little bit. That is because on my keyboard, I typed Alt+Shift+F on Windows that causes fissures to code to reformat the code to be a bit more readable. Now with the head ready, it's not really that exciting. We'll go to the body and there is where all the fun will happen. So the body is really where all the contents of the HTML document will go, so all our images, links, tables, and so on will go in there. And with this ready, we already have the page structure finished that pretty much every page on the internet is going to be using, and so our pages are going to be based on this as well. If you want to see the result, which I think you do, we need to go to the browser and let it load our HTML, and we're going to use for that, Live Server, and that was the extension that we installed in Visual Studio Code in the previous module. We're going to use it now for the first time, and to do so, right‑click here inside of the HTML code and select Open with Live Server. This will trigger the opening of the browser so we can see the result. Now, I do think you're in for a little bit of a disappointment here since we don't see anything here, apart from the title at the top of the page. Now this is perfectly normal as we haven't added any real content inside of the body just yet. We've just set up the page structure, but nothing more. We'll start adding content in the next module. Once you have used Live Server, it also appears here at the bottom in Visual Studio Code in the status bar. If it is not running, you will see Go Live, and clicking that, will also trigger Live Server to open your browser and show your HTML. If it's running, you'll see port and then a number. And if you accidentally close the browser window again, click on this button again, that will then close Live Server, and clicking it again will restart it all over again.

Summary
We've arrived at the end of this module. I hope you had fun writing your first HTML. Let's do a quick recap of what we have learned in this course. Remember that HTML is a markup language used to structure content, use HTML elements to build up a page, and instantiating an element is done through the use of tags. Finally, we saw and created together a base structure for our HTML pages and learned that all pages on the web are also using this structure. In the next module, we will start adding content to the body. We will learn how to work with text in HTML.

Adding Text, Headings, and Images to the Home Page
Module Introduction
Most web pages contain text, but we have closed the previous module with a page that is not showing anything just yet. Text, and perhaps more important, well‑readable text is vital for almost every web page. Welcome to this module in the Building Websites with HTML and CSS course here, at Pluralsight, where we are now going to be adding text, headings, and even a first image to our first page, the home page. My promise to you, by the end of this module, you'll be seeing already some content on your site. To learn how to create that welcome text, I have divided the module in a few parts. First, we will learn about working with headings. After all, it all starts with a title. Then, we'll learn about paragraphs themselves, and we'll learn about how we can actually add styling to our text. Finally, already here, I will show you how you can add an image. We'll have a dedicated module that explains a lot more about working with images, but I already want to show you here how we can add this to make our site look a bit better already. Let's get going.

Working with Headings
And so as mentioned, we will kick off the module by creating headings. Headings are built‑in elements which are used to create a heading or title in our HTML code. HTML has six levels for headings going from h1 to h6, h1 being the largest type of heading, and h6, the smallest. You can see the different headings in the code snippet on the left. Since they are known to HTML, automatically a default styling will be applied to these. You can see those in the screenshot. H1 will be displayed larger than h2, for example, and h1 would typically be used for the page header. Smaller headings are then used to separate paragraph headings. I have now used text in these heading elements, but within the heading, we can also place other items as well, including a link or an image. Here's another tip, typically you'll only have one h1 on your page as it is used to contain the main title of the page. While they're used to create titles in the page, and therefore, bring structure to the content, they're also used by screen reading software. Screen reading software is often used by visually‑impaired users. It will read the content on the page. Using headings, this software knows what is important on the page.

Demo: Creating Headings
Let us in the first demo of this module start with the creation of the welcome text and use a few headings. While doing so, we'll see how the browser renders these differently. So let's now start writing some content for our website, and as said before, all the content needs to go in the body element, so between the open and close tag of the body. So let's type hello world. If you want to see this in the browser, click here on the Go Live button, that is the Live Server extension, and then the browser will open. And indeed, we see the hello world message appearing. Now with Live Server and Auto Save enabled, I can just type something here, and automatically, the browser and the page will refresh, that's a workflow and layout with code and the browser next to each other that I often use. Now for this course, I won't be doing that since it would use too much screen real estate, but know that this is a very easy way to view your changes. Now, let's start adding some real content. I'm going to include a first heading. Now let's include an h1, and I'm going to add some text in there. So now we have effectively created an HTML element with an open and a close tag, and the text here is the contents of the element. The h1 is used to define, well, the most important heading. Let's see this in the browser. As we can see, the browser automatically applies some styling to make this text look, well, more important. Multiple levels of headings are available all the way from h1 to h6. I know that h4, h5, and h6 are not that commonly used. Based on the heading level, the browser will now apply a different style. And once again, I want to point out here that all our tags need to be closed for our page to work correctly. When typing the opening tag, make sure that you also close it with an h1. And of course, the same goes for, well, pretty much all tags. Of course, just adding headings is not going to be a very useful page. We'll need to add more content, so let's start by looking at paragraphs.

Adding Paragraphs
Now that we have a heading, time to create the actual content, and we should place that within a paragraph. While you can place text directly in another element, even directly in the body, textual content of a page will commonly be placed inside of a paragraph. In the code snippet you see here on the slide, you can see that the text is surrounded by a p element, and that is indeed the paragraph element. The content between the tags will now become a paragraph. Paragraphs in HTML define a block of content like a paragraph in a book. When the browser encounters a p, it will also put some line space, a margin before and after the paragraph. Within a paragraph, we may just want to go to a new line without creating a new paragraph. That is possible using the br element, the line break element. We can use this pretty much everywhere in HTML, and it will always have the same effect, a line break, so vertical spacing is added. You may be asking, did he not forget the closing tag for the br element? Well, I'm glad you noticed it. The br element is using an empty tag, meaning it has no closing tag. We will see some other tags that follow this pattern. Now before we go to the demo, another small tip. When routing your HTML markup code, you can use line breaks, spaces, or text in your code as much as you want to make your code more readable. Real world web pages typically contain a lot of HTML, and so that is a good thing. The browser will simply ignore all of these and just look at the opening and closing tags.

Demo: Adding Content
Let us return to the demo. And now, we'll create a paragraph that will contain some welcome text. Now to include a paragraph, we'll simply include the p element. In there, we'll place our content that will belong to a single paragraph. I'm going to paste in some text, and then we'll look at the result. As you can see, while this text is visualized automatically, that's quite logical, but there's also some spacing added between the heading and the paragraph. A new paragraph automatically adds some spacing, some margin, let's say around it. Now to make things easier, if you're following along, I have included some useful files with the downloads of this course. Go to the assets folder and there you'll find for this module a text file that contains a text I've just pasted in. Now, of course, in the UI, this is not really readable. It is just a bunch of pretty much unformatted text. We'll need to improve on that. And for now, we can, in this paragraph, also include a line break. We can do that by adding the br element. Looking at the result, you can indeed see that the line break has not been included. If I want, I can also include multiple ones as well. There we go. I'm going to remove this here. Now, I can, of course, also add multiple paragraphs, and if I surrounded this part here with another paragraph tag, I will see the result here. Again, spacing is included. I'll add a few more from the snippets file, and you can do that too. Because I added this using multiple paragraphs. spacing is also included in between these different paragraphs. And the last thing I'll do in this demo is make things a bit more complete. I'll include another header that says that this is our history, and I use for that an h2. Now it is already finished. We already have some content that will be shown on the home page of our website, but of course, it still looks pretty boring, doesn't it? We'll need to improve on that.

Styling Text
Our text still looks rather boring, doesn't it? No colors, no fonts, not what we were hoping for, I guess. So in the next part, we will learn how we can style the text. HTML contains several ways to add style to content to one more preferred than the other. If we look at plain text, for example, again, inside of a paragraph, HTML contains two elements for basic styling, namely the b and the i. These are so‑called inline elements as they just apply to text they will contain. The b will make the content bold, and the i makes the content italic. Note that you'll still see these being used frequently, but better ways exist to make text bold or italic, and we'll see those soon. There are quite a few other elements that also apply styling directly to their text. The em tag is used to emphasize text, and the strong tag is used to make the content appear stronger, so by default, in bold. The code tag will make its text look like computer code, so a different font will be used. The samp tag, which stands for sample, has pretty much the same visual effect. The kbd element is used for keyboard input, and the var is used to display a variable. Now, this may all sound a bit confusing at this point. I totally get that. We'll come back to some of these elements later in the course. Just remember for now that there are quite a few elements which will apply in different styling on text, and the same applies this text can be used, but better ways exist to format or style your text. Now, you may be wondering, can I use attributes on the heading? Well, yes and no. There are a few attributes available on the heading such as align which can be used to, for example, center the heading. Now while that works, it is not the recommended way. And oh by the way, headings will align by default to the left. So if these aren't the best way of working, what is then? Well, we are about to learn a very general concept to apply formatting and it is using styles. Styles are typically used to group several style‑related attributes and add style to a given element. We can actually work with styles in several ways. Let's take a look. Here's another heading. Say that we want to add some color to it and overrule the font size used by the browser. We want to be in control. This type of style information is not HTML's job. Indeed, it is not related to content, but it is purely stylistic information and that we already learned was not the task of HTML. So to add this, we can use the style attribute, and then we use a semicolon‑separated list of style properties. Here, I first set the font size. Font size is a known property and has to have this syntax, so with a dash. Then we use a colon and then the value, so 40 pixels. Then we add a semicolon, and then I specify the color. The color is specified as an RGB value prefixed with the hash sign. Now, this type of style notation is an inline style, it is added directly onto the element. While an inline style is definitely okay to work with, it is not reusable. Imagine having a large page with several headings that need to be styled in the same way. Today, Bethany may be using orange for the headers, but maybe in some time she wants to change the color of the site. If we would use all inline styles, we'll need to make updates to all headings. A better way is grouping these styles. You can see I have done this. We're now looking again at the head of the page, and in the header, I have added a style element. In the style, I can now declare one or more styles, we have two here, and in the style for the main header, we now have the same information as before, but if I now need to change it, I can do so in one place. Later in the course, we will start using these styles. Next to putting the style information in the head of the page, it most often makes sense to move all this information to a separate file even. We can then share the style information between pages, instead of just within the page. This is where CSS comes in, cascading stylesheets. A CSS file is a separate file that contains just style information. You can see on the right that it contains the same information as we had before. From our HTML page, we can refer to that CSS file. This we, again, do in the head using a link element that points to the CSS file. We'll start using CSS in the next module.

Demo: Styling Our Text
Now let's return to Visual Studio Code, and I'm going to focus now on making sure that the text on our home page looks nice, while not being bothered too much with where we are going to put a style code yet. Now we finished the last demo by looking at our, well, boring page. Let's try to make it a bit more exciting already, shall we? We can actually add styling information to our HTML. Now do remember, HTML is all about the content, it's not really about the layout, so we'll bring in styles for that, and we'll later move these styles to a separate CSS file, but that's something for later, in fact, for the next module. Now, some basic style information can be added directly onto HTML elements. For example, I can write here align is center, and the result is now that my paragraph is now aligned in the center of the page. Now how this works, this is well, let's say not the best way of doing things because I just said that HTML is about the content, and now I'm using style information directly in this element here. That is not a good way of working. Now we can actually do better by already including a style attribute. The style allows me to specify style information that will apply on this paragraph, so look at the way that I'm doing it. I used a style attribute, then an equal sign, and then I open and close my quotes. In there, I can then specify style attributes that could be, for example, an attribute to align the paragraph in the center, and for that, we can use text‑align center, and now notice how I'm doing it. I use the name of the attribute, text‑align, then a colon, and then the value center, and then a semicolon. The result, well, that's exactly the same, but now we are using a style attribute, which is a better way of working already. Now we can add this style attribute, well, pretty much everywhere. For example, I can replace this body tag here with a body tag that also includes a style attribute. Now, I've specified that I want a background color and a font to be used, more specifically a font‑family. Now what you see here also that I'm using multiple style attributes, background‑color and font‑family in one style attribute, and they are semicolon separated. And the result, well, that already looks a bit better. We have a background color, and we can clearly see that we're using another font than the browser default now. And while we're at it, let's also replace this h1 here. I apply the font size and a color. This starts to look already like a styled page. We're doing a good job. Now we have applied styling on the entire paragraph, but probably we'll also want to apply styles on the contents of the paragraph. Take, for example, that I want to emphasize Bethany's Pie Shop here. I want to put it in bold, and then we can use the b element and put it around this text, and then it will now appear in bold. That's what you see here. If you want to emphasize something by putting it in italic, we can do that using the i element, and I surrounded this sentence with the i element, and I'm going to remove that line break here. I don't think it's really necessary still. And here we now see the result. Now while we're at it, do you know that we can mix this with styles directly on the paragraph. Here, I've now made my entire paragraph bold, and I gave it a different color. I don't really like the result, but now you can see the result. Again, notice that we are using the semicolon‑separated list to apply multiple style attributes on the paragraph. And one more thing I want to add at this point is some copyright information at the bottom of the page, and that's what we'll do in a small tag. As the name of the element is giving away, this will make the content a bit smaller, and we can see the result over here.

Adding Images
In the final part of this module, we're going to bring in our first image. Adding images is what the job description of the image tag or img tag says. The img tag is a little special in that it doesn't have an end tag. It's an empty element. However, it needs to know which image it needs to display, and that is done through the src attribute. Using the image tag we point to an image, it is not really inserted into the HTML pitch. The alt attribute can and should actually be used to provide a description of the image, again, typically used for screen readers.

Demo: Adding a First Image
In the last demo of this module, we will enhance our home page a little more with the use of a first image. I'm going to add some more content here after the last paragraph. So first, I'm going to bring in a horizontal rule element, and for that, I use the hr element, and it's going to draw a horizontal line. I'm also going to bring in some more text. I wrote in some more text, an h3 with the text, Our weekly promotions, and then I have an h4 that says Cheese cake, and then we have some plain text. Now, let's bring in the image. The first thing that I'll do is I'll bring in the physical image. Go to the assets folder and then the m4 folder, and in there, you'll find this cheesecake.jpg. Drag that into Visual Studio Code, and it will appear here. That looks delicious. Anyway, I shouldn't get distracted. Now, let's add an image element. The image element is rather special as it will not contain a closing tag. It is a self‑closing tag, as we can see here. I can then specify that in the image element, I want to show the cheesecake image, and for that, I use the src attribute, and I set it to cheesecake.jpg. That's the image I want to show on my page, and the image itself is rather large, so I will specify here that the width should be 500 pixels, and the height should be 300 pixels. So I use some attributes that specify what width and height I want to use to display the image in my page. And before we continue, let's add another line break here or a couple of line breaks even because otherwise this text will appear on the same line. Let's now look at the result. Our delicious pie is showing in our page. So we've successfully included a first image. How cool is that? I hope you are already happy with the result. You've really created your first HTML page that contains some content and an image already.

Summary
And there we go, we have some basic content on our welcome page. Finally, we can see the fruit of our hard work. We learned in this module that we can use a heading to separate large chunks of text. We saw the p with a paragraph for content and then we learned how we could add style to that content. In the demo, we have used inline styles, but as mentioned, there are different ways we can do this. And we've touched on CSS already briefly, but it's such an important topic that it warrants a separate module, so see you in the Moving to CSS module.

Moving to CSS
Module Introduction
We've now put our first steps in HTML, and we've created our first web page together. That is a big step forward. Now, this course is titled Building Websites with HTML and CSS, so it's time to explore the second part in there, the CSS part, that is. In this module, we'll understand what CSS is, and so by the end of this module, we'll have the same page, but now featuring CSS. Going forward in this course, we'll keep using the CSS‑based approach, and frankly, it is the only way you can and should be writing the code for your web pages. So let's get started learning about CSS. A quick look at what is included in this module is in place. I have touched very briefly on CSS already in the previous module, but now is the perfect moment to understand it in more depth. What is it? Why should we use it, and so on will all get covered in this first part here. Once we know how CSS works, it is time to learn about CSS selectors, a way to select or find the HTML elements we want to apply the style on. And finally, we'll see how to create CSS styles for text. At this point, that is basically the only thing our web page contains, and so we'll recreate a set our page, but now using CSS. Time to jump in. Let's do this.

Introducing CSS
So without further ado, let us understand what CSS is and get a basic understanding of how it works. This far, we've written our first HTML code. Using HTML, we have defined the content of our page. In the previous module, we have seen a few tags, such as the b, which made our text look bold, but most styling we applied was done through the style attribute. In its value, we have defined a few style properties such as the font size and the color. For these properties and for many others as well, there's no corresponding HTML tag to allow us to specify this style. Now, this works as we have seen, but there are definitely some downsides to this approach. If my page grows larger and there are several occurrences of this element, I need to add this style information many times. Imagine that you want to change it. You'll need to go through your entire pages code to update the style information everywhere where it's being used, and soon our site will have more than one page that will make the task even more tedious and error prone. It's easy to forget an occurrence here and there. There must be a better way. Well, hello CSS. CSS, short for cascading stylesheets, is a language that allows us to specify how our HTML document should be displayed. Using CSS, we will separate the code that specifies the design from the code that defines the content, which is the HTML code. Indeed, instead of putting both the content and its style information in one file, we'll typically split things up into an HTML file and a CSS file. And the letter contains the style information there. In a CSS file, a group, design, or style code has caused a very broad range of options going from how we want to display tags to the layout of the entire site and even including animations. The name, stylesheet, is a very good one that it seems as it contains style information for our site, but the C, which stands for cascading, is an interesting one. We'll learn soon that multiple styles, in fact, I should say style rules, can apply on an HTML element. There is a system in place that will decide how these different styles will be combined, and in case of conflict, which rule will win in the case multiple styles collide. Cascading happens all the time. You will come to understand it very soon. Alright, so we'll move our style information to a separate file soon that will be a CSS file, and in there, we'll write our style code inside what is known as CSS rules. Indeed, a stylesheet will contain typically quite a few rules and those will apply soon on the HTML elements we have already created. What you see here is the first basic CSS rule, and it will always follow the same syntax, by the way. This first part here is known as the selector. The selector is used to specify which HTML elements should be targeted by our CSS rule. In this case here, .header means that this style will be applied on HTML elements that have a class attribute applied with the value header. We'll learn more about this very soon. So that is the selector part. Then we have a set of curly braces, and in between these, we'll have one or more declarations which consist out of a CSS property and a value separated by a colon. It is closed using a semicolon, typically. Definitely, if you have more than one. You can see that the value of the color is a simple one. It is just red, but then the border has a collection of values which defines how we want to display the border in the CSS rule here. As said, CSS rules will go into a stylesheet, a file that has the CSS extension. Here under red, you can see my CSS file named styles.css, and it'll contain one or typically more than one CSS rules. In our HTML file, we can create a link to our CSS file inside the header, and we use the link tag to import an external stylesheet. On the link, it's required to add rel= stylesheet as this is used to define the relationship between this HTML document and the linked CSS file. Next, using the href, we specify which is our CSS file we want to link. So that is pointing to the styles of CSS file here. In this example, this link is assuming that the HTML file and the CSS file are both in the same folder. It's possible that won't be the case, and then we'll need to use a relative path. While we won't be doing that here, it is possible to include more than one CSS file with an HTML file, but we'll keep it simple, and we'll have all CSS in one single CSS file. Now just defining a CSS style won't do a lot. We need to apply it. When we looked at our CSS style, we saw it started with this selector. The selector is used to specify which HTML element or elements are targeted by this rule, basically, which HTML elements are selected, hence the word selector. Our selector was set to .header and that basically means that this style applies to all HTML elements which have a class attribute defined with the value header. This element, a div here on the left, therefore matches the selector and the style declarations to be specified in our CSS rule will be applied, such as the color and the border. I'm using, again, this div thing here. You may be thinking, what is that again? Well, we'll come to it in more detail in the next modules as it is an important HTML element. Div is short for division. It's basically a part of our HTML page that we'll want to apply a CSS style on. It's very commonly used for layout purposes, so it will apply a style. Indeed, very often, divs are nested too. We'll start using divs as soon as we are going to start working on the layout of our site. Now, the C in CSS has a very special meaning as already mentioned. Let's look at it in a bit more detail. I have created here represents an HTML page structure. While not everything will be fully clear at this point yet, you should already understand that at the root, we have the HTML element. Then inside that, we have the body, and in there, we build up our page. In the body, it will be nesting again in order to build up the structure of the page. You'll learn quite a bit of this in the next module. For now, imagine this as a page with a header, that's the h1 here on the left, and then we have a div, so a block in which I have another nested div and a paragraph. This tree‑like structure is built up in the browser, and it is often referred to as the DOM, the Document Object Model. On these notes, we can apply CSS styles through selectors, and they will work in a cascading way. Say that we apply a style on the body, so it's basically on the root level. In there, we specify that the font size should be 12 pixels. Doing this basically sets the font size to 12 pixels throughout the entire body, unless an element overrules this. I have a div here that has its own style defined, which adds that the color should be red. What is happening here is that because of cascading, the font size will be set to 12, and the color will be red. That font size of 12 is only true and is not causing a conflict, so the style is inherited plus added to. This other div I'm adding padding on there. We don't know what padding is yet, but it means that the space will be added in the element. Again, no conflict, so this div will have a font size, a color, and a padding. The paragraph here, however, goes into conflict, bringing both a new font size and a new color. Since these are defined closer to the element, they will overrule the inherited font size in color, and thus, this paragraph will get a font size of 10, and it'll be blue. Now, some elements will have a default set that is different and that has a higher priority in the cascade too. Let's look at the h1. I've applied a style on there that sets its color to green. Normally, this would inherit the full size of 12, but that is not going to be the case as the h1 has a default that has a higher priority in the cascade. Therefore, it will be displayed with its default font size, but with a green color. Understanding the full cascade isn't always easy, but going through the rest of the course, you'll come in contact with quite a bit, so you'll learn more as we go. Just one more thing before we go to the first demo. If you want to add a comment inside the CSS file, you can use this syntax. This can be a single line or even span multiple lines.

Demo: Adding a CSS File
Alright. Time to head to VS Code again, and we'll now bring in our CSS file and we'll link it from our page. Our current index.html contains some inline styles, and it's clear that we'll need to change this and move to CSS. So to get things started, we'll create a CSS stylesheet file first, which as mentioned in the slides, is nothing but a simple file, a text file that is with the extension CSS. So I'll go ahead and I'll create a new file here again in visual Studio Code, and I'll call this styles.css. There we go. The CSS file created. Now, before we create a few sample styles already, let us link our CSS file from our index.html file. The browser will be rendering the HTML file, and it needs to know where it needs to go for the style information. So in the index in the head, we'll create a link between these two files. And for that, we'll use the link tag. Notice, again, that this has no closing tag, so we don't need to include a forward slash or forward slash link here. We do need to specify to HTML that we are creating a stylesheet link here, in this case, since other options are possible. So we add the rel= stylesheet. Finally, we need to point it to the correct stylesheet, and for that, we'll use the href attribute. We'll use href more when we create links, so clickable links, but here too, we are linking the stylesheet, and as the value, we, of course, specify styles.css, and since both files live in the same folder, I don't need to include other path information. Now with the stylesheet added and linked, let us now create our first CSS rule. Let's look at the index.html. We had created an inline style here, in fact, we have a few. Let us start with this one here on the body, and I'll cut this out here. Now I go to styles.css, and I'll add a CSS rule for the body. So I add here body, and then I can add a set of curly braces. In between, I'll paste what I had cut out, and I remove the style= here and the quotes. Let's now reformat this a bit, and there we go. We have our first CSS rule, and I see that everything still looks the same, and yes, the page is back to what it was. Success. I'll do another one. I'll get the inline style for the h1 here, and in styles.css, I'll add a rule for h1, so h1 will be the selector, I'll paste it in, and move the style part again and then quotes, and I'll make sure that every line also ends in a semicolon here. If we, again, look at the result, well, this looks okay again. There we go. Our CSS file is now in use. But a question, how do these selectors, so this point here, work exactly? Let us jump back to the slides to learn more.

Working with CSS Selectors
Now that we have seen the basics of CSS, it is time to delve into CSS selectors. They are key to working with CSS efficiently. We've already seen the basics of CSS selectors. The selector is basically a pattern that will be used to determine on which elements in the HTML document the style will get applied. Basically, you can think of it this way. The HTML document is scanned for matches with the pattern defined as a selector, and if there's a match, the style rule, so the different properties, will be applied onto the element, again, in a cascading way. We've seen a few basic examples already. We had a selector.header and another one, I think it was just div. Indeed, these selectors seem to have different forms. There are indeed different types of selectors. We'll look at them and how we can use them very soon. By matching, it is very well possible, and yes, very common that more than one single element will match with the selector. If you think back of one of the IDs behind CSS, it's that we could define our styles once and have it be used on multiple elements in one go. The opposite also goes. It is possible that multiple matches will happen. On a single element, multiple selectors can match, and therefore, the different styles will be applied on a single element. Then, the cascade kicks in and that'll decide what the eventual value for the element will be in the case of conflict. Just to be clear, this part of the CSS rule is the selector and it comes in several forms. There are a few selector types available. Let's take a look. The first type of selector is the element selector, and I think it is really the easiest one of the pack. Using an element selector, we're basically using the tag name as a selector. Here's an example of such a selector. A selector is just the name of the tag of the element we want to apply the style on. Say that we want to create a style for the h2 heading so that all the h2s we use on our page or our site look the same. Well, then we use just h2 as the selector. In HTML, we can give an element an ID using the ID attribute. In general, this is unique for the page, although your page will still work fine if you use the same ID multiple times. Based on this, we can create a selector that is pretty specific and that is the ID selector. This style will be applied directly on the element with a given ID. Say that I have an element, a div, which I've given the ID header. If you want to create a specific style for that element, we should use an ID selector. Now to do so, we need to prefix the header and the selector with a hash sign. As said, IDs should be unique, but in the case you're using the id on multiple elements in your page, typically, the browser will apply the same style on all elements that match. However, if you want to apply the same style of multiple elements, we should look at another type of selector, and that would be the class selector. HTML elements can also have a class attribute basically used to mark elements of a related type. It is perfectly fine to have multiple elements on the same page with the same class attribute. Here's an example of using the class selector. Now in my HTML, I have a class attribute and the value is set to header in my CSS, and I want to apply a style on all elements, possibly multiple ones, which have the header class applied. We can select these using the class selector which is prefixed with a dot as you can see here on the left. Now all elements with the header class are selected, and the style will be applied. The fourth and final type of selector is the attribute selector. You can probably guess how this one will work, right? This one is going to search for an attribute on an element. It can be used to search for the presence of an attribute or the value of an attribute, and I haven't worked with attributes a lot yet, but we will do so further in the course. Say that you want to apply a style on all links which have a specific attribute, the title attribute. Links we haven't covered yet, but they are created using the a tag, short for anchor. The title is used on a link to define a tool tip that appears when you hover over a link in your browser. Using this syntax, I'm not selecting all links, all a's. Instead, I'm selecting all links which have a title attribute specified, that is a syntax for an attribute selector. Next to these type of selectors is also the universal style selector. What this will do, as you may have guessed from the name already, is selecting all elements, and therefore, this style will be applied on all elements. Now, although our HTML knowledge is still limited, I want to give you the other options around selectors at this point already too. Granted, they may be a bit hard to grasp depending on your programming knowledge, but let's go through them now anyway. We'll use most of these throughout the demos, and I will explain them again there too. Alright, CSS combinators. As the name suggests, we can combine selectors to make more specific or extended selections of elements. What is the first example, .main, a space, and then a. This is called the descendant selector, and it'll match all elements that are a descendant of another element. In this case, you are selecting all a's that are inside elements with the main class applied. And the main thing here is this a needs to be inside some div, possibly there are multiple levels of nesting in between and that is still fine. The latter is the difference between this one and the second one, which is called the child selector. In this case, we'll have a match only if a is a child, a direct child that is of an element that has the main class. Also, if you want to apply a style on elements that have either the main class or the header class on them, we can combine them using a comma. Here's an example of the child selector. And specifying in the selector, I want to select all elements which have their header class, but they have to be a direct child of a div, hence, I'm using the div element selector. The snippet on the right satisfies this indeed. We have an element with the class header and it's a direct child of a div. The fact that the inner element is div too isn't important. It is the class here that caused the match. Next to these selectors, we can also use something called pseudo classes, another interesting tool. What are they all about? Well, have you seen how when browsing the web that when you hover over a link, it'll change the color or it will get underlined or when you click it, it'll change color? Well, those are states. Indeed, a link can be in different states. Using pseudo classes, we can select an element based on the state, and this is in addition to the already‑shown selectors. You can see the link, the anchor again, and it has indeed states. Notice the syntax. We have the regular selector, then a colon, and then the state. The link is basically the unvisited link, and then we want it to be blue. When it has been visited, if that's another state, it should be red. When we hover, it should be green, and when it's active, so being selected, it should be red too. And before we go and apply CSS selectors, I want to briefly show you some common CSS properties. We use these and quite a few other ones throughout the course. If we want to set the color, we will typically use the color property. If you want to set the background color, quite logically, the background‑color property is used. On the background, we can do more than just specifying a color. We can include an image specified by the URL. Also, I've added no‑repeat here saying that the background image shouldn't be repeated, but instead should be shown once fixed in the center. Around the image, the background‑color is used. To specify the font size, we use a font‑size property, and we can do a lot more with text such as underlining the text. For this, the text‑decoration:underline is used. These are just the tip of the iceberg in terms of CSS properties, but I don't want to overload you. We'll come across some other ones along the way.

Demo: Creating and Using CSS Styles
Alright. Finally, back to Visual Studio Code. I will start creating and using CSS styles now. To learn more about CSS selectors, I'm going to work on a separate HTML file. I'm going to start by adding a new file and let's call that playground.html. Now take a look at the downloads of the course again. In the m5 folder, you can again find a snippets file. In there, you can find some HTML, copy and paste that into this playground.html. This HTML is a somewhat modified version of the HTML we have in our index page, so I can explain selectors. Going forward, we'll start using selectors all over our HTML in a practical way, so it's important to understand the basics of how to select elements in your HTML correctly. So here's the content, there are some elements in there that we haven't covered yet, but no worries, we'll come to this as well. More important right now is the structure of the HTML. Let's look at that. I have an h1 here, and below, we have the h2. Then I have a div here with an id promo, and then I have another div here with a class attribute applied onto it. The class name is set to intro‑text. Inside the second div, I have another heading an h3, and still inside this div, I have this tag here. This a is to set an anchor and that is used to create a link. In this case, back to the index.html page. We'll look at links and navigation in a lot more detail later on in the course. And then the div is being closed over here. Then I start another div here with the class attribute, and it is set to main content. That contains a paragraph and I have, in fact, another nested div here, which is commented out. I'll need that in just a second. I'll restart my server here. There we go. So this is what our page looks like now. Okay. Let us now create some selectors to work with the different elements. So let's go to the styles.css which I had already also linked from the playground.html file. I start with the CSS rules we have, in fact, already created before for the body and for the h1. As we can see, these are element selectors. They use selector and the element name, so body and h1. You can easily see that they apply on a playground.html if you, for example, change the background color. That doesn't look nice, so let me undo that. In the body, I have applied a font family which sets the font for the entire body. By default, the browser will take a different default font, but by applying a font on the body, this will cascade down. Indeed, if you look at the h1 in the running website, you see if this font is also applied on the h1, it'll inherit this font. As we already covered, the browser applies a default style for headings, but I'm adding some extra customizations here, like the font size and the color. These are closure to the element than what the browser sets as default, so this gets precedence. In our HTML, we also used an h2, this one here. We don't have a style for that one yet, yet the browser applies a default style. Using another element selector, we can add a style for this one too. I've used another text‑related style here to create an underline. Indeed, now the text has been underlined. Next, we have this div here with an id. If we want to target this from CSS, we can use an ID selector. I'll now start the selector with a hash sign and then the name, so promo. I want to emphasize that div, so we'll give it a background color that stands out, and a color white so the text will be white, and I'll make this text bold too. Remember to always add a semicolon at the end of each CSS property that we're setting. And also, as said in the slides, IDs should be unique on the page, that is really why they're IDs. Using IDs, we can easily identify a single element on the page and apply a style onto it. Let's look at this next one here, it has a class attribute. If you want to target that one, we'll use the dot and then the class name. Let's add a font‑size and set it to small. And here is the result. We see the emphasize div and the div with a small font applied. The ID is that we can have multiple elements with the same class name throughout the page, and then the CSS styles will be applied on all of them in one go. This is one big difference between ID and class selectors. Let me copy this name here and apply it here on this div as well. We'll see that this text now also becomes small. Note that this would also work by giving both divs the same ID, but it's not a recommended way to structure your HTML. Let me undo that here. There you go. Now one downside, perhaps, is that my h3 also became smaller since it was inside of the targeted div. Now I could add another element selector by just adding h3, but in this case, I'd like to create a more specific style, namely one for the h3 that is inside the intro‑text class div here. In that case, I need to work with the combine selector. If you look at the structure of the HTML, the h3 is a child of this div, and it is, in fact, a direct child, meaning that there are no other elements in between. I can thus create the following style. In this sector, I now use .intro‑text h3, that will apply to all h3s inside the element with the class intro‑text applied onto them. Now there is another interesting element inside this div here, and that is this a, so the link. If we look at that in the browser, it looks like a regular link that can be clicked. It'll be blue when we haven't visited the target page, it'll look purple when we did, and it will become red when we click it. Now we can use pseudo classes to specify a style for the different states a link can be in. We're going to use the regular element selector, so a, then a colon, and then the state. There are four important states for the anchor tag, link, the regular one, visited, hover, and active, and for each state, I'm going to specify a different style. When we now look at the result, we see that our link looks much more in line with the page style. Nice. We have one more div here we need to do something with. It has a paragraph, and it also had the commented out div. Let's use another combine selector and learn about the difference here. I'm going to add first another CSS rule. Here, I'm using again a combine selector, the descendant selector, which we've already used for the h3 inside the intro‑text div. What this does is it selects a p element inside an element with the main content class selector applied onto it. In this style, I set the background color, so we see that the style is applied on this paragraph. And let me show you something else. I'm going to uncomment this div here, so now the paragraph is nested within a different div. If you look at the result, there's no difference. But if I now add a greater than symbol and turn this into a child selector, the style won't be applied anymore. That is because the paragraph isn't a direct child anymore of the main content div. There's more nesting, there's another level in between, let's say. That is how these two types of selectors are different from one another. I think we have now covered quite a lot already about selectors. We'll start using them in our application starting with the next demo. Let us head back to the slides for now.

Applying CSS Styles on Text
We've added and used our first styles. The goal of this module was twofold, understanding CSS and then converting our current home page, which contains mostly text, to a version which moves all the style code to CSS. Let us look at text‑specific styles next. Text is, of course, really important, and we can using CSS do quite a lot with text. Again, I don't want to give you an overview of all the things we can do. I want to show you a couple here, and in the demos, we'll use some other properties. With text using CSS, we can, of course, cover the basics such as the color, the font size, and the font weight. Properties exist for the alignment, as well as for the decoration. And finally, we can also include a custom font. Let me show you a couple of interesting properties to start styling text, and let's start with the font size. We've used this example, in fact, already the property to change this is the font‑size property. So far, I've set this to something like 15 pixels. Now, I'm setting it to 1.5em. Now what is that all about? Then we use pixels for the font size. We are using an absolute length unit. Because of screen sizes and the many different existing sizes, they can cause your page not to look perfect on every screen. Em, on the other hand, is a relative length unit. So relative to another length property and that typically scales better. Therefore, if you really care about making your page look perfect on every type of scale of device, it is recommended to use em for sizing. If you want to change the color of text, we'll use the color property. Note it is not font color. To make our text bold, we can play with the font‑weight property and set it, for example, to bold. Text decoration can be set to underline to underline the text, and the text transform is a property that we can use to specify uppercase or lowercase. If we want to use small caps, which often results in a nice effect, we can use the font variant and set that to small caps. Using the text‑align property, we can change the horizontal alignment of text, and we can set it to align left, right, or in the center. Here, I've set it to center. If you want our text to have more space, we can use the line height, that'll give it some breathing room. Finally, let me show you how we can include a custom font. By default, only a limited set of fonts are usable. If you want to achieve a nice looking font in our site, which will offer one by the way, we'll need to include that font in our site and have our page use it from there. To do so, we need to use a bit of a special syntax. We need to use the font‑face rule as you can see here. Font‑face is prefixed with an @ symbol. In there, we defined the name for the font as you want to use it using the font‑family property. I've selected the name here to be myFont. Next, I need to point using the src property to the font file. A font file is available as a TTF or an OTF file typically and that we need to include in our site. Once you have set this up, we can now use the font‑family property and point it to our custom font face, and I'll show that in the demo.

Demo: Recreating the Home Page Using CSS
Alright. Time to recreate the home page now using CSS using what you've learned here. Here's a running home page again in its current state. We had already created a few CSS rules in the styles.css which are, in fact, just two element selectors. Note that I commented out, again, the rules we created in the previous demo. It was just a side step to teach you a bit more about selectors. You can even remove those as you won't be building on these anymore. So currently, we have the body and the h1 rules already created. Thanks to the font we put here on the body, all descendants within the body, unless otherwise specified, will get this font applied now. And since this is an element rule, this will apply on all body elements throughout my entire site, meaning that all pages will get this style applied on their body element, again, unless a more specific style is applied somewhere else. Now first, I'm going to change the font I'm using. In the body, I'm going to specify the following. This looks a bit more modern. Now, for parts of my site, I actually want to use a custom font, which I can also do using CSS. Let us first create a folder here called fonts. Then head over to the assets of the course again, which I have downloaded, and in the m5 folder, you'll find a fonts folder. In there, you'll find two TTF files, copy these, and now in Visual Studio Code, right‑click here on this folder, and select Reveal in File Explorer. Inside that folder, paste your copied fonts, and we now see that the font files are included. Now with the files added, we can now add a @font‑face rule which is a specific type of rule. Inside this rule, we specify the font‑family, which is the name that we'll give to our font inside of our code. The src, short for source, points to the physical font file. After that, we use the URL and then the part to the font of the file, which is inside of the fonts folder, hence the fonts/ and then the name of the ttf file. I'm using here the bold version. And while we're add it, I'm going to create a variation, the regular non‑bold one, which we'll need later on in the course. Now, I want the h1 heading we created earlier to use our newly imported font. I'm going to add the font‑family here and set it to WorkSansBold, and yes, there's a clear difference. Our new font is now being used. Now on this h1 heading, I'm now using a pixel‑based size. Now while that works, it is best to use em values, so relative values. I'm going to change that here to 2em, which will ensure that this looks good on all types of screens. And I'll bring in another style here to make sure that all headings inside our page will use the regular version of the font. I'm now using a comma‑separated list of selectors, all element selectors here, but it could be a mix. What's important here is that the same style will be applied on all these, so individually, but I'm setting it in one go. Now, the cascading effect of CSS allows me to add on to that. For example, if I add this on h2, this will add on what was already set on h2. I need to do that separately because I may not want this on the h3 or h4, so I can't do it here. The font weight is now set to bold here. In the index.html, I'm going to remove this style here on the paragraph. That is plain content. We'll make more changes to it in the next modules. I do want to apply a different style on this h3, which for now, I'll give an ID. Indeed, although it's a built‑in element, I can also add an ID and create a specific style for this one, and I specify promo header as the ID, and back in my style.css, I can create a style for the ID promo header, so that needs to be prefixed again with a hash. I've now used a text transform and set it to uppercase. Indeed, the text is now uppercase. Alternatively, you could use small caps. And if you want, we can also center this text in the middle of the page using CSS again, and there we go. Hmm. Not really that nice. Let's remove that again. Now, I think we have touched on the most common properties to work with text for now, and so our page already looks better. Time to wrap up this module.

Summary
Wow. We've covered a lot of ground. We have learned a lot about CSS. I hope you have come to understand why CSS is so important. Using CSS, you define how our page will be displayed independently of HTML. CSS is used for many things such as text styling, but also for the layout of our pages. Alright. Our page is still very basic. Time to start with the creation of a real page layout, again, supported by the power of CSS.

Defining the Page Layout and Structure
Module Introduction
Although we have, at this point, some welcome text on our site, I think it's hard to really refer to our site as a site, in my opinion. That's about to change in this module. We are going to create the structure for the entire page, and we're going to rely quite a bit on what we have learned about CSS in the previous module. We're going to divide the available space of the page in several blocks and each will get a specific meaning. By end of this module, our home page will already look much more like a real web page, that is a promise. I will start with a brief overview of the HTML content model. It's a little bit of theory I have to take you through. Once we understand that, we can start building up our page, and we will be using the different semantic elements part of HTML to do so. In the last part, we'll then learn more about CSS and how it can be leveraged to create our site layout. Let's dive in.

The HTML Content Model
Before we start building the page structure using semantic elements, I'm going to explain you the HTML content model. It may sound a bit complicated, but it's really very simple. You'll see in just a minute. And before I explain to you the new content model that we have and use today, it's interesting to take a look back at the old content model. It may already have occurred to you during the demos of the previous modules that where we add elements, some trigger the creation of a new line, while others don't. Well what you saw there was actually the old content model in action. Before the current version of HTML, let's say so before HTML5, elements could either be an inline or a block element. Those were the two types of elements. An inline, as the name implies, will be added on the same line until that is full. The image element is a good example. Where we add it, it will be added on the current line. Block elements, on the other hand, will always be added on a new line. We saw, for example, when we added a heading that we didn't have to add a break to position it on a new line. The same goes for the penny graph. That's what's specific for a block element. With the introduction of HTML5, this model was pretty much overhauled. We already saw that HTML elements are used to give meaning to content. We saw that elements are semantic, they give meaning to their content. When we will use a header element very soon and put content inside, it's clear for the browser that the content inside the header is actually header content. The new content model is, therefore, much more fine‑grained than the old one. The rules still apply mostly in how a browser will add on it, so if it goes on a new line or not. Keep in mind though, that HTML is not concerned with the layout of the page and how the different elements will be placed on the page, that's the task of CSS. Think back of what we had in the previous module. We moved style‑related information to a separate file, the CSS file. All of that CSS code is really concerned with how content appears in the browser. So as said, the new model will describe which content is expected in an element. The model basically places elements in one or more categories. One or more you may ask. Yes, indeed, an element can actually be part of more than one category. You'll see it has a bit of a Venn diagram with intersections. The metadata content category defines elements which establish the presentation and behavior of the rest of the document's content or create a relation between this document and other external documents. The flow category defines most elements used in the body of a document, so images, links, sections, and much more. Sectioning content points to elements used to organize the page in a logical structure. Phrasing content defines the elements related to text of the document. Heading content defines all elements that define headers, so h1, for example. Embedded content points to elements that are used to bring in external resources, such as video, and interactive content are elements designed for interaction. Again, the plain link is part of this category. And the main thing to remember here is that HTML is focused on giving meaning to content within the document, and the elements in HTML help us to give the correct meaning to content.

Working with Semantic Elements
Now enough with the hopefully not‑too‑boring theory. Let's look at those semantic elements we can use to build up our page. We're going to start using the page model in a practical way. What I suggest is the following. We're going to think about the finished page, which has been prototyped by perhaps a designer. Then we will look at the different blocks within that page and their contents. We're going to see which semantic element we can use for that particular block. Use the page again, the finished home page. I think it's pretty obvious that our page contains several interesting blocks we can distinguish. At the top, we'll have a header where we can place navigation and a logo perhaps. On the left, I can clearly see a block where some other related content should go, so that will be a side bar. Then the main block in the middle will contain the main content, and finally, at the bottom, we'll have a footer. If you look around on the web, you'll see that a lot of pages follow this same structure. Indeed, it's a very common structure and that's why we can use a common set of elements on our pages. HTML contains the div element. We have touched on the div already a few times, but now is a good time to learn more about it. Div stands for division and it's clear that we could use this for each of our blocks on the page. The div is a block element, and it can be positioned on a page using CSS. While that is in HTML today, it's actually not a semantic element, it's a generic block element that doesn't give any meaning to its contents and is, therefore, much less used. Semantic elements that we'll soon see are used instead. You will still use the div, but purely for layout purposes, so it's not going to give meaning to content. If we don't use semantic elements, a page is typically created as follows. The div is used and each will get an id attribute added to it. Then these IDs refer to the block, such as the header, the sidebar, and so on where it will be used. You have seen IDs in the previous modules already, and we looked at CSS selectors. While this works, it's not perfect. Some developers will use main as the id for the main content, while others might use main section. That causes issues, for example, in screen reading software, and it is solved using semantic elements. Which semantic elements can we use instead to place on our page then. Well, HTML comes with four elements in the sectioning content category. Article is used to contain standalone content to an article really, this could be a blog post or a story. Inside this, we can, of course, use our headings or paragraphs. Next, the section. This is a very generic element used to define, well, a section in the page. Don't use a section for just layout purposes though. That is where we will still use the div element. The nav element is used to contain navigational links and the main menu and it's typically used in the header of the page. Not all links on the page go in a nav section though. Only the real menu of links within your site will typically go in there. Finally, the aside is used to contain related content, so related to the main content of the document. It's typically used for things, such as quotes, or can also contain links separate from the main content. In the flow content category, there are quite a few interesting elements to be found. The header is a container for intro content or navigational links. The footer element defines the footer content for the document and will typically contain things such as the copyright information or contact information. The main element defines the main content for the element, and the address tag is used to contain contact information, such as the author of your document or the physical location of the store. I mean, I use this knowledge to map this onto our page we had before. We can use, I think, the following elements. In the header, we'll use the header element. On the left, I suggest using an aside, although other options would work here. In the main block, I suggest using a main as the root element, and in there, I see then an article that contains the main textual information and a section for the promotions. Finally, for the footer, I suggest we use, well, a footer element. Now you may think this sounds a bit confusing, and honestly, I would agree. There are sometimes no clear rules on which element you should use where, and elements are also closely related. It is sometimes difficult to choose whether something is like a main or a section. Now, don't worry too much. Try to be using the element that is the closest to what you think it will contain. Your page will still work fine if you choose a different semantic element.

Demo: Creating the Page Structure
So finally, demo time. We are going to create the HTML structure of our page together using the semantic elements you've just seen. We're going to build together this layout in this module, and we'll start in this demo by already adding the semantic elements we can identify this way. We'll also bring in the content that we created earlier back into this page. What you're looking at here is the result of this entire module so that you can easily understand what we are going to do in this and the next demos. At the top of the page, we're going to have a header, and we're going to place our menu in, so with navigation. On the left here, we're going to have, well, a little sidebar, and then the main content of the page will be all that you see here on the right. And then finally, I have a footer at the bottom of the page. So by the end of this module, you'll already have this working for you. As I said, in this demo, we'll add the elements and then very soon we're going to bring in CSS so that everything gets positioned correctly on the screen. This again, is the power of separating out CSS for layout and HTML for content. You can work with these independently. Layout can be added onto the content later on. So currently, we have this here, and this all needs to go well to the right block, to the main block of the page let's say. This is the content that we created in the previous module. I am going to for now cut that out here and place it, well, here below the HTML, and then I'm going to comment it out, so we don't get distracted by it because I first want to create the page structure. Commenting out this entire block can be done by writing an opening angle bracket, then an exclamation mark, and then two dashes, and then where we want to comment to stop, we type another two dashes and then a closing angle bracket. Now, this is just comment, and it will not be influencing the layout of our page. Alright. And let's now start adding our content. We are going to use for the creation of the page, semantic elements. This will make sure that our browser, as well as screen readers, understand correctly what type of information they will contain. I'm going to use for the header, well, a header element, that is one of the semantic elements that comes with HTML. It was introduced actually with HTML5. I've added as id= main‑header. Now in the header, I will use later on navigation, so using links, and the semantic element is the nav element, and that's again, a semantic element that is used to point out to the browser that this will contain the navigation for my site. I don't have any links just yet, so I'll place in some placeholder for now. If we now look at the result, it'll just show the text. Nothing visual is really being added because of these semantic elements, and that is normal. We're not getting all of a sudden any layout for free. We'll need to add CSS for that. With the header ready, let's now move onto the rest of the page. For the left column, I'm going to use an aside here. An aside is basically used to show well, some site content is typically used for information that is related to the main content. So don't always see it like a side column. I've given it an id= left‑menu. Now this is a semantic element that, well, basically points to related information. I'll put some links in there later on as we saw. It doesn't mean that I can't put any other elements in here. I can, for example, also place a paragraph containing simply the phrase, Browse our pies, in here as well. I do want to indicate again for semantic reasons that this is the header of the element, so if I'll wrap this inside a header again, I'm already bringing in IDs and classes here so that we can easily select these elements later on using selectors. Okay. Now, let's look at the main content of the page, and what better choice do we have than using a main for this? Using the main, we specify what is the main content of the page. That is of course going to be our welcome text, and the id is already set to main as well. Now, the main will contain several blocks. The first element will be the text that we created earlier. I'll use for that an article. The article is basically self‑contained standalone content and that's exactly what our text will be. In the article, we'll place a header to point out what is going to be the title again, so we'll bring in another header, and then I can actually take my h1 we had before. So let's cut that out of the commented out code. Now, let's take the rest of the content, so the paragraphs and the h2 and we'll put that also inside the article. If we look at what this looks like in the browser, again, this doesn't look anything like what we're after, but that is due to the fact that we don't have any styles just yet. I add some more content here that is the promotion, and I'm going to put that not in the article, but in fact, I'm going to use a section for that. So I've placed in there our h3, as well as the image for the pie. And the final look that we still need to bring in is the copyright information, that is going to be typical footer information that contains information about the document. Here's the footer and let's now put that copyright information inside the footer. I want to place one more element within the footer. The footer is typically also used to put contact information in. After that, I'm going to use this paragraph in which I use an address, the address of Bethany's Pie Shop, that is contact information typically placed within the footer. If we look at our page now again, we'll see pretty much the same layout as we had before. However, there's a very structural change that you don't see. The content is now inside semantic elements which give it meaning. Browsers now understand which part in the content is what exactly and that's a pretty big deal, however, no layout as of yet, that we'll work on soon enough.

Creating a Layout in CSS
So far, the page we have created looks, well, slightly messy. We have added the semantic elements, but the page looks far for what it should be like. That's, of course, because we haven't added any layout yet, and as mentioned before, that is the task of CSS. We'll now start exploring the capabilities of CSS to create a layout. The first important concept that we need to learn about is the CSS box model. What is that all about? Well, let me explain. It boils down to the fact that around every element, a rectangular box exists, and that box consists out of four parts. At the center, we have the actual content. That is the element where we'll see the text order image. Around the content, we have the padding which basically clears the area around the content. Then we have the border, which is an outline around the padding and content, and they can be styled with a color or a thickness. Finally, we have the margin which is a space between the elements border and the surrounding elements. We can provide values for each of these, so in order to arrange how our elements are placed on the page. Now at this point, I want to focus on the layout, and then we need to work with the padding and margin. So padding will clear a space around the content of the element still within the border. It can be used from CSS to do the padding property which we'll look at soon. And then next, we have the margin which creates a space around the element and other surrounding elements. It can also be used to CSS now using the margin property. Now let's see these in action. Say that we have two divs, so there are two blocks in my layout. You can see them here in the screenshot. They both contain the text, Welcome to Bethany's Pie Shop. The top one has to a class selector the first style applied to it which sets its text to white and its background to red. The second style is applied on the second div, and therefore, it gets a green background. Now look at these two elements, these two divs. They are placed below each other with no space between them. Also, the text is really close to the surrounding block, that is because, by default, the value for margin, the space between the divs is 0 and the padding too is 0, so the text will basically be touching the surrounding box. Now, let's change our CSS rules. On the first one, I'm adding a margin of 10, basically creating a space of 10 pixels around the elements box. You can see on all sides that space has been cleared. On the second rule, I've added padding now. Padding appears on the inside, so we create a space between the elements border and its content. Notice I have in both cases now defined a single value 10 pixels, so that will be used on all sides. We can also use other more specific properties if you want to specify a different value for any of the four values. If you're working with margin, we can use margin‑top, right, bottom, and left and provide a separate value. For padding, we of course, have the same properties. Now we're adding these four properties or at least the ones we need all the time might be too verbose. CSS offers a shorthand syntax that we can, in fact, use in multiple occasions, but will now use it for margins. Instead of writing the top, right, bottom, and left properties, we can write just margin and then provide the four values in one go, each of these separated by a space. The order is, of course, important too since CSS needs to know which one you want to put where. The first one will be the top, the second one, the right, the third one, the bottom, and the fourth one will be the left value. Now different options exist here too, but I don't want to take it too far at this point. This one you'll often see in use. We can provide just two values. In this case, the first value, so 10 here, is used for both the top and the bottom, whereas, the second value is used for the left and right margin. One other useful option we can and will use for the margin is to center an element within its parent. Say we want to center a div inside another parent div. We can use margin auto on the inner div and it'll get centered within the parent div.

Demo: Using Padding and Margin
Alright. Time to see padding, margin and so the CSS box model in action. Let's head over to Visual Studio Code again. This will be a small demo, although, what we see in this demo will actually be something you use very frequently, namely padding and margin, so the CSS box model. We'll make a small style change temporarily here to make things visually more easy to understand. I'll create a CSS rule for me, so for this content that is now being highlighted here. I've used the ID, although I could also use the element selector here. As we now see, our content is aligned directly within the main div. That means that there is no padding being applied. There is a small distance between this element and the browser window though, that is because by default, a small margin is applied on the body. We'll learn about that later. If I now go here and I add a margin of 30 pixels, you'll clearly see that a large distance appears between our main block and the rest of the page while the content is still right next to the main. We can also indicate that we want a margin only on one of the sides. For example, using margin‑top 100 pixels, we are indicating that we only want to have a margin at the top. Let's use the short hand with two values. Here, we are now passing in two values. The 100 pixels applies to the top and bottom values, and the 200 pixels applies to the left and right. Now padding works on the inside of the element and it'll created spacing between the content and the border of the element. Let me add some padding too. Indeed, now some breathing room has been added here now, and just like with margin, we can also use the shorthand notation if you want different values or the individual properties like padding top or padding left.

Positioning Elements on the Page
Using just padding and margin, it's clear that we won't be able to create a full page layout yet. For that, we'll need to learn how we can position elements within our page. CSS comes with a position property, and it can be set to different values, each with their own characteristics. Now before we continue, a word of warning, CSS positioning and really creating a full layout can sometimes be difficult to get right. For this course, I don't want to dive too deep into the specifics to keep things simple. So alright, back to the position property. The default is static, so in fact, if we don't want to interfere with how an element is placed on the page, it is considered static. Next, we have relative, fixed, absolute, and sticky. Let's look at these in more detail. So let's start with position relative. The relative here means that the element is going to be positioned relative to where it would normally be placed in our document. Position relative works in combination with left, top, bottom, and right properties. As we're using these, we can place the element relative to its default, say static position. Take a look at the slide here. On the left, I have now defined the CSS rule, main, and it is applied on the green, so the middle block. In the rule, I have added position relative, and I'm including left and top. So the element is moved down 10 pixels because of the top 10 and moved to the right because of the left 20 pixels. Notice that the other content isn't influenced by making this element use relative positioning. Another option for the position property is fixed. As the name suggests, using fixed will set the element in a fixed position relative to the viewport, and the viewport is a fancy word to point to the area of the window in which content can be seen, so your current view in the browser. Of course, the page is possibly larger in that as a scrolling will occur. And by making an element use position fixed, the element is removed from the normal flow and set in a fixed position in the viewport. Scrolling won't affect this element, it'll remain in the same position. This can be useful for the menu that you want, for example, keep in the view. In the snippet, you can now see I've set position to fixed and bottom and right to 0, which will position the element in the bottom right corner. Now it is also that the other elements are moved closer. That is because the green element was removed from the normal flow of the document. If you use position absolute, things are similar, but also different. Take a look at the code first. I have a parent rule and that is using position relative. Then I have another main, but the position is now absolute. Assuming that the main element is nested inside the parent, using position absolute will position it on the specified top and right relative to the closest positioned ancestor, so in our case, the parent. We can indeed see that it's inside the parent and it's in the top right corner. Finally, we have position sticky. It's a bit of a mix between relative and fixed. By default, it'll behave as being positioned relatively, but when through scrolling, it reaches a certain point, it will use fixed position. Now it's hard to see this on the screenshot, but the id is that we can use this also for a menu that for example, will be at the top of the screen, and it'll be sticky over the other content when we scroll. Next to the position options, we can also use floats in CSS to work with the position of elements. As the name implies, using float, we can let the element float in its container and let other content like text or images float around it. Float can be set to different values. Left means that the element will float to the left of the container, right, well, I guess you can figure that one out yourself. None is a default if we don't specify anything, and inherent means it'll take the float value from the parent. You can see a good example of where we can use float, more specifically float right, in this case. I want my text to float around the image, and the image should also go to the right of its container, so we use float:right. The element is, again, removed from the normal flow of the document. In combination with float, clear is often used too. Say that we have two elements. The red one I've set to float:left, so it'll be on the left of its container. If we now want to move the next element below, so basically, we're saying we don't want to have another floated element in the given direction, we can use clear. I've used clear:left here for the second one. It should go below the first one, which is already floated left.

Demo: Creating the Page Layout
Now all of this layer of stuff can have you scratching your head. Admittedly, this isn't the easiest, but we have to learn it to build a full page. Let's now look at things in a practical demo, it'll help you understand all of this much more easily. We'll use what we have learned in CSS to arrange the semantic elements on our page, and the result will already be a nice looking page. So this is what our site currently looks like and this is where we need to arrive. That is what I showed you earlier. Alright, let's start. The first thing I'm going to do is make a change to the style applied here on the body. As we saw, our content, so the menu needs to stretch from the left to the right and also needs to be placed against the top of the screen, so without any margin, and by default, HTML always keeps a little bit of margin around our content. We don't want that, so I've used a margin left and right here. What this will do because I've set it to auto, it means that the contents of the body will be centered because on the left and right, it'll keep the same amount of margin. Setting top and bottom to 0 will allow us to place content all the way to the edges of the screen, and we don't see a lot of effect of this yet, but that's because, of course, we don't have any background color in the header just yet. In the HTML, we had given the main header of the page the id main‑header, so this one. I'm going to add a CSS rule that'll add a background color onto the header. If you look at the result, well, it looks pretty tiny and that is because it is sizing to its contents, which is just a text which is in the nav here and nothing else. Let's add a style for the nav next. I'm using an element selector again. I specified the height for what later on will contain the navigation as we have set it to 8 pixels. I've also given it a width of 1,000 pixels since I want my navigation block to be in a certain block on the page. A margin is also specified. This is using a notation that we haven't seen yet, one with three values. The 0 will be for the top, the 10 for the bottom, and the auto for the left and right. Auto means again, and it will actually use the margin on the left and right, which will be equal, in other words, this will be centered. That already looks a lot better. We now see that our header is effectively centered in the page. There was 1,000 pixels that is going to be used that's not really visible, but it will actually show here, and then the rest of the margin is equally divided between left and right. With the header ready, let's now move onto the rest of the page. The rest of the page, so I accept the footer, will also need to go in the center, so also within that 1,000 pixels that my menu is using. I'm going to use for that a div, and I'm using a div here because there is really nothing semantic about this. This is really a layout element that I'm going to use just for layout purposes. I want to place all the content, except the footer, inside of this div, and I've given it the id main‑content. Here's the CSS rule that I'm adding. As said, this div will be 1,000 pixels wide, and just like the nav, will need to be centered. So again, we use a trick here to divide the left and the right margin equally, hence, we can center horizontally. And let's now look at the aside which has the id left‑menu. I'll add the CSS rule for that one next. I'm going to say that this takes up 30% of the available width and the available width is 1,000 pixels which was defined by the div here, and also specify that we are going to float left. Float left means that this element will go to the left of its parent. That's indeed what we want. We want this aside to go to the left and it needs to take up 30% of the available space. Let's now look at the main content. That has the id main, and I want this to take up 70% of the width of the page, but I want this to go on the right, so next to my aside. If you're in this now, this starts to look okay. We have two blocks, so the aside and the main content next to one another, and the footer is still very much out of place. Let us fix that. I'm going to bring in a style that makes sure that this footer is well aligned. I'm going to use the clear here to make sure that no other elements are going to be placed next to it, so it will take up all the available space within the surrounding div. If you take another look, this is now almost where it needs to be. It seems that the footer isn't perfectly placed at the bottom of the page and making this work correctly actually goes a bit out of the scope of this course, so without further explanation, I'm going to bring in a CSS snippet that will fix this. Later courses in this part will explain this in more detail. The entire body was now wrapped in another div on which this style here was applied. And if we now look again, the footer is nicely aligned to the bottom of the page. Great.

Demo: Using the Browser Developer Tools
Know that the HTML code of all pages that you can find on the internet is visible, and you can, of course, use it as a great resource of knowledge to learn how something is built. I'll show you how we can do this using the Chrome Developer Tools. Using F12 or by going to More tools and then Developer tools, you can open, well, the developer tools. As you can see here, I can now see the source code for the Pluralsight website, and as you can see, much of it, although much more complex, looks already familiar. We have the doc type, then we have the HTML, then the head, and then the body. Using this little icon here, I can select an element on the page and see how it was created, so go ahead and use these developer tools to explore how many other sites have been created, and you'll learn a lot more about HTML.

Summary
Another module done, and I hope you are happy with the result. The page now already starts looking like a real web page. In this module, we have covered these semantic elements. They are a key building block for the HTML pages as they give meaning to their contents. We've looked at several of the most commonly‑used semantic elements. We've used the aside for the sidebar, the main for placing the most important content of our home page, the header and the nav at the top and the footer at the bottom of our page, and the section for the promos. HTML is not about the layout of the page, that is done using CSS. We have seen how we can add styles to position our content on the page. Now, I think our page is missing logos and images at this point. We'll fix that in the next module.

Working with Images
Module Introduction
Our site is starting to look nice, but images will bring it to the next level. That will be the focus of this module, but we are going to learn how we can include images and logos to our pitch. I'm still Gill Cleeren, and welcome to another module in the Building Websites with HTML and CSS course here, on Pluralsight. To kick off the module, I'm going to explain you how images are used in general within a web page. We'll also learn about the different common options we have to work with images. Next, we'll see how we can embed an image using the image element. Related to this is also the semantic figure element, part of HTML. And finally, we'll look at one more topic in this module and it is how we can add a favicon to our site. It's a little icon that shows in the browser navigation bar. Bethany's home page will look much more polished by the end of this module, so let's dive in.

Working with Images on Our Pages
And as promised, we are going to start the module by looking at how images are used within a web page like ours. When we use an image in any web page, we are only directly using the image within the page. We are, instead, referencing the image. This means that the image is indeed still a separate file somewhere on the server, perhaps that we have embedded within our page. If we include, for example, a video or an audio file, the same applies. We're also referencing this from our page. Let me explain this in a bit more detail. So on the server where our site files will be hosted, our HTML files are available as physical files probably in a folder, and we now, within this HTML page, need an image, we'll use the image element and that will then contain a reference to the separate image file that you want to emit. Both the HTML, as well as the image file, are separate files. When we create these references, the image can be located on the same server, so within the same site. In this case, the reference we will be creating is a relative one, so the path to the file will be relative. However, that is definitely not required. The image we may want to include could be hosted somewhere else, perhaps on an image hosting service or just on a plain different domain. In that case, the reference will be absolute, meaning it will be the complete URL we need here. Even if the image is relative, we could still use the absolute reference, but that is not needed. The browser showing the page will be smart enough to let's say substitute the relative link for an absolute one. On the web, several image types can be used which are supported by the browser. Not just any image type can be used though. I will explain you the most commonly‑used image types here. First, the GIF. GIFs can contain 256 colors, and they can contain animations. Lots of internet memes are GIFs today. They can also be transparent. Although they are very common since they can only contain 256 colors, they are typically used for logos, but not so much for images. PNGs can contain many more colors and can also be transparent. They often are more commonly used for logos and icons than GIFs. They can't be animated, though. JPG files can contain 16.7 million colors, but they can't contain animations nor be transparent. They're the best choice for images as they can contain many more colors, and size wise, they can also be nicely compressed. Finally, we have the SVG. SVG is a vector‑based format, meaning it can scale infinitely. Now, what does that mean exactly? GIFs, JPGs, and PNGs are bitmap‑based formats. That means that they contain pixel‑based information. For example, a JPG of 300x200 pixels will contain color information for each of the pixels. You can imagine this as being a large grid, and each cell in this grid is a pixel. Each pixel knows exactly what color it contains. However, when we zoom in on these images, the pixels will get larger and the image becomes unsharp. With vector‑based, we don't have pixels, but instead, the image is composed out of lines, points, and other mathematical types. This means that the image is recalculated when we zoom in, and the result will always remain sharp.

Using the img element
Now that you know more about the different types of images, let's see how we can include this in our page. Adding images to our web page is pretty simple and straightforward. We actually already saw earlier in this course that we can use the image element for this, so img. Let's take a look at this in a bit more detail. First notice that the image element is, in fact, an empty element. It doesn't have an end tag. The tag is self‑closing instead. The most important attribute for the image is, of course, which image should be displayed, so the reference is the physical file, and for that, we have the src attribute, so the source. Note that here the relative path contains other segments, so images/products. This means that the image can be found relative to the hosting HTML file in this sub folder. The source attribute is required, but the second attribute is also quite important. Using alt, we can specify an alternative text that will be shown if for some reason the actual image can't be shown. This may sound less important, but know that this text will also be used for screen readers. If a person with a visual impairment comes to our site, they can't use images. Screen readers will instead use the old value to explain what is being shown. The image element can also contain a value for the width and the height. If none is used, well then the image is shown in its original size, unless we've, of course, applied CSS. Adding a width or a height is done to let the browser know what size to expect for the image. If we specify one of the two, the aspect ratio of the original image will be used. If we use both, then this will be the size used to display the image without taking into account the aspect ratio of the original. Although we can use the width and the height, note that these are just about how the image will be rendered. They have no influence on the actual physical size and this file size of the original image. If you only need a small version of the image, it is definitely good practice to resize your image separately. Otherwise, including very large image files will cause the browser needing to download large files which will make your site feel slow, and that is not what you want.

Demo: Adding Images to Our Site
So back to the demos. We're now going to use images and logos in several places in our page. This is what our page looks like at this point. At the end of the module, we'll have added images and it will look totally different, so much better, you'll see. And the first thing that we'll need to do is bring in the images. I have included all the images you'll need in the downloads for this course. Go to the Assets again, and then under m7, you'll find an images folder. Drag this images folder onto the Explorer in Visual Studio Code, and then make sure to click on Copy Folder, and the images folder should show up here in the Explorer, and then see that the images have been added. And the first thing that I want is the image in the header, so in the navigation bar at the top of the page. For things like this, I will typically use PNGs. They have the added advantage that they can be transparent, so the background will shine through. That is exactly what I need. Here, you see the image that is Bethany‑horizontal‑logo.png, and I want to include that on my index.html, more specifically, over here. So I'm going to use the image tag, and I'll set the source to images/logos/bethany‑horizontal‑logo.png. And remember, the image tag is a self‑closing tag, so I'll use it like this here. You don't need to include a closing tag, but also do not forget the forward slash. Do note that I'm using a relative path here. The image is actually included in the images/logos folder, so I need to include here images/logos and then the name of the image I want to include. Let's take a look at the result. While the image is showing, hmm, it's not really nice, it's way too big. I need to change that. I'm going to add a CSS style and set its width and height and possibly also some alignment. So first on the image tag, I'm going to use a class attribute, and now I'm going to add a CSS rule for that. I can actually set the width and the height of the image. I'm going to use width here, and I'm going to set it to 175 pixels, and that already looks a lot better. As you see, the image was scaled down by the browser. It is still using the original file, but it's made a bit smaller. Now our PNGs are perfect for this. An alternative could have been an SVG file. An SVG file is a scalable vector graphics file, and it contains the code that draws the logo. It's made with a program such as Adobe Illustrator, and it can be exported as code. The added advantage of using SVG is that it is fully vector based and can, therefore, scale as much as we want. Let's add another image. I'm going to bring in Bethany's other logo and I'm going to put that here in the aside. This is going to use Bethany's badge logo, and we see the result here. This time, I've added the width in the HTML, which also works. If I add the width, automatically the browser will scale keeping the same aspect ratio for the image, and that's exactly what you see here. If I want, I can overrule this and set the height, for example, to 200 pixels. And then, of course, the browser listens to what I'm asking it to do, and it will scale both horizontally and vertically, of course, not keeping the aspect ratio in mind at this point. Now this is not looking good, so I'll remove that here again. I also think that the website will look better if we include an image of one of the pies of Bethany in the main content. Let's do that here. So in the main article, I'll include another image. I'll include this hero.jpg, which is an image of a delicious, I think, blueberry pie. I've set the width to 100%, that means that the image will be scaled to take up all available space horizontally. There we go. That looks nice. Now one problem is that people with a visual disability will now come to the page and they will not know what this image contains. You need to be a good developer and include an alt attribute on the image that then describes what the image shows. The alt will contain, as the name implies, extra information about the image that can be used, for example, by a screen reader. So I set the alt here to a delicious blueberry pie. Visually, there's of course, no difference, but the alt value will be retrieved, like I said, for example, by screen readers. Now the images we've used so far were all within this images folder. We can also include an image that is located on another website on another server, that is. Let's start it with the image at the bottom of the home page. Let's here replace the image that we had already included before, so the cheesecake.jpg. I've now replaced it with an external link, an absolute link that contains an image of a pecan pie, but it's hosted now on a different website. The image will still be included, but is now coming from an external site, and as you can see, that works fine as well.

Adding the Figure Element
While the image is a default to add images to any web page, HTML also contains the figure tag. Let us take a look at what this tag can be used for. The figure tag is, again, a semantic tag, meaning it'll give semantic meaning to an image. If the image that we want to display is something like a logo, we will always use the image element, but in the case that an image basically wraps self‑contained content, such as a diagram or an image related to the content, we can wrap it in a figure. Note that the figure will still need the image element to display. It is not replacing the image. If you want, we can also use a fake caption tag to add a caption to the figure. As mentioned, the figure will need to contain the image to display the actual image. That's what we see on the snippet here. We use the figure here to give semantic meaning to the image.

Demo: Using the Figure Element
And let's return to the demo, and I'll use a figure and the figcaption elements. I'm going to add another image, namely the one that depicts Bethany in her pie shop. So it contains an image which is related, let's say, to the content of our page because it's surrounded with content about Bethany and her pie shop. That is why it would make sense not to just include the image here, but also use the figure, so that's what I'll do. I'll surround this image with a figure tag. Now this image is contextual, it is related to the content. Now, keep in mind that we still need to use the image tag to really display the image. This is just adding some extra information about the image. I've also included a figcaption. I added some information, a little caption about the image, and we see the result of that over here. We've now used a semantic figure element, and we've used a caption that gives more information about the image. Now while this doesn't change anything visually, it also gives our content more semantic meaning.

Creating a Favicon
In the final part of this module, let's take a look at how we can add a favicon to our site. First off, what's a favicon? The icon basically under the image is the image shown in the browser in the tab. Also, if the user creates a favorite out of our site in their browser, then this image is used. I think it's obvious that this is where the name comes from. There are some requirements for this image to work as a favicon. It must be a PNG, a GIF, or an ICO file of preferably 32x32 pixels, 16x16 pixels should also work.

Demo: Adding a Favicon
In the next demo, I will show you how we can add a favicon to our page. Currently, the browser displays a default icon in the tab, as you can see here. Changing this is actually a small thing, but it shows that you are polishing your website. So let me show you how we can change that icon here. In the assets again, you can find a favicon.png, which you should copy or drag to the root of the website in VS Code. It is a 32x32 pixels image, and it's actually based on this batch logo that we used before, and just including that image doesn't solve things. We also still need to point our page to use that particular icon. And for that, we're going to go up to the head again, and in the head, we can now add another link element. In the link, I'm going to specify that the relation that I'm creating is here of type icon. I'm going to specify that the favicon, which is of type image PNG should be the favicon. If we now go back to Chrome, you'll see indeed that Chrome has updated and it shows our favicon here in the tab.

Summary
I'm impressed by the way our site looks now. Adding images makes such a big difference. Let us just recap what we have seen in this module. I think it's obvious that nearly every web page uses images as can be for backgrounds, logos, images, and much more. Images are added using the image tag. On the web, there are some preferred image types that we have looked at in this module as well. Can add a JPG, a PNG, as well as vector‑based SVG images. When adding images, be a good developer and do include the alt. Screen readers will thank you. In the next module, we'll learn about tables, and I hope to see you there as well.

Creating the Pie Overview Table
Module Introduction
It's time for another module in the Building Websites with HTML and CSS course here, at Pluralsight. And in this module, we're going to start working on a new page, namely the pie overview page. On that page, as the name is giving away, we will show a list of available pies, and we'll use for that a table. Let's start by taking a look at the agenda. The focus of this chapter will be the HTML table that we'll use on that overview page. I'm going to first give you some information, and then we'll use the table in the overview page. Secondly, we'll look at some more options around the table, such as merging cells to create different visualizations.

Understanding the HTML Table
So without further ado, let us take a look at the HTML table. And the goal of the HTML element is displaying tabular data. The element is pretty simple, it is the table element we'll use. If you have some previous launch of HTML, you may have used the table as a way to create a layout for the entire page. While that may have worked, let's say, a long time ago, it is definitely not a good idea today. The reason, you may be asking, well the table is, as mentioned, made for displaying data. It is not made to handle how your web page today needs to display properly on all kinds of devices, so it's not created with this in mind. So far in this course, we have been using other elements for layout purposes, including the div, the aside, the main, and so on. That's the way we have to do a layout today. Okay, so back to the table then. Tables contains rows and columns. We create a number of rows through the tr element and columns using the td element. This will result in cells being created, and in these cells, we can place all the content. What you place inside these cells doesn't really matter. The table is really open to what you place in there. You can include an image, a paragraph, a link, or even another table. This will then result in a nested table, and HTML is totally fine with that, and let's see how we can create a table then. The base element is, not surprisingly, the table. All rows and columns, as well as the content, will be placed between the opening/closing table tag. Next, we can use a tr to create a row. Tr stands, of course, for a table row. For row, we want to create, we'll create another tr element. Columns are next, and they will need to be created within a row. A column can be created using td which stands for table data. It is possible to have a number of columns per row. Here, we now have a table with one row and two columns, so basically, we'll have two cells at this point. Once we defined the table, we can then place content within the td elements. Here, you can see that I have in the first cells, an image, and in the second cells, some plain text. The result of the table we have now created can be seen here. By default, the table itself isn't visible, but we'll change that in a minute. We do see the table data here. We can see the images in the first column and the plain text in the second column. And before we continue, let me emphasize this again so this doesn't get lost. Tables should not be used for layout purposes. They are just in HTML to display data. Can you remember why? Indeed, tables are meant to display data, nothing more. Tables have since the introduction of HTML5 just a very small set of attributes still. If you have experience with tables from the past, know that all other attributes can be set using CSS like we've done in the previous modules already. So that means that things, such as cell spacing, width of the table, and many more, can be used from CSS, and we'll see this in the demo. What is still there is the border attribute on the table. Setting the border attribute gives you the ability to get control over how the border is displayed. Here, we've set it to 1, and you can see the result in the image. As said, all other attributes should be used again using CSS styles. You can see that I have set the width of the table to 100%. I specified a black border, I've added some spacing and padding. Again, all these can only be used through a style, not directly on the table. By the way, look at the selector. Can you name the type of the selector we're using here? Well, if you guessed element selector, you are right. Indeed, I have used table, which is the HTML element as the selector. Hence, it is the element selector refused here. Although the table is not a complex element to deal with, sometimes it can be a bit confusing to see what you're doing. Even if you don't want to display the border, just enabling it during the development of your page can be useful to see what you're doing in terms of cells that are being created.

Demo: Creating the Overview Page Using a Table
Let us go back to Visual Studio Code and create a new page to display an overview of all pies available from Bethany's Pie Shop. So in this demo, we're going to work on the pie overview. Now, a lot of the content that we have already created in the index.html is going to be similar for that page. Now we're going to be creating, also in the next modules, the new pages, let's say based on this structure we already have in this index.html. So what I suggest that we do now is creating a starter file, a template file, let's say, that contains the structure of the HTML that all pages will have in common. So go ahead and copy all the contents in this index and then create a new file. Let's call it a template.html and paste everything in, and then we'll remove the home page‑specific content, so that would be the article and the section. So now we're ready to create new pages based on this template page. So what I'll do is I'll copy the template.html, and I'll call this the pieoverview.html. Let's make sure that in the browser, we can now reach this page, and if I type here by overview.html, we indeed see the page. It doesn't have any content yet, but that's okay. That is what we will be creating in this demo. So I'm going to create an overview of pies using a table, and I think it makes sense to put the table again in the main block because this is the main content of this overview page. Creating a table can be done using the table element. If we look at a table at this point, it's not showing, kind of logical. We don't have any rows, any cells, nor any data, so let's fix that. Just for now, what I'll do is I'll make the cells visible. I'll specify a border here. Remember that, like I said in the slides, this is a little bit of a trick to do that directly here on the table while creating it. We'll change it into a style later on. By adding a border, we'll see effectively the cell borders of the table that we are creating. Now, a table in HTML is a collection of rows and each of these rows can contain a number of columns. Creating a row is done using the tr. Again, we are creating an opening and a closing tag, and for the table row, we then, inside of the tr, create a number of tds. Td stands for table data. This is the place where I'll put the actual content within. So if I want, for example, to have a row with five columns, I'll simply create five table data, so td elements. So now we have created a table with one row and five columns, and although it's pretty small, it is effectively showing, but it doesn't show any data just yet, so let's do that next. In the first column, I want to place an image, and I think by now you already know how to do that. Let's place an image here, and the source will be one of the images that I have in the products subfolder. If you go to the images folder and then under products, you'll find more images of pies ordered by type, so in subfolders. So I can now point the image in this cell to this cheesecake‑small image inside of the cheesecakes folder. Don't forget to close the image tag as you see here. I've taken the small image, so that's like a small version of thumbnail, so to say. I'm also specifying here, again, what the width should be, for example, 100 pixels. So there's our first image. Now you already start seeing that the table is being created. We can see a border around the image, and we also distinguish a couple of empty cells to the right of the image. Let's add data in these cells as well. I've pasted in some text for the name of the pie, cheesecake, a description, a price, and then the text, View details, which we'll still use to create a link to the detail page. At this point, we can now effectively see our table forming itself. We can see a number of cells in the single row we have created. Of course, a table with one row is rather simple. We can have multiple rows, of course. I've pasted in another row for the apple pie, and so now we have two rows in our table. I've now fast forwarded by pasting in another snippet that you can find in the downloads of the course to show a list of all the pies that you currently have in Bethany's Pie Shop. As you can see, we now have a nice table showing all the available pies in the store, and what I don't really like is the way that this table looks. I don't like this double border here. Now remember, it has specified that the border was supposed to be 1, so that is what is actually making this border visible. If I remove that entirely, then the table borders will be completely hidden. Now, that's also not very readable, so what I'll do is I'll create a style for the table so I can control entirely what the table will look like. So let's add a first style rule here for the table. So I've added another style here that is now applicable to the table, as well as for the TD. I specify that I want a border, solid black of 1 pixel, and the border needs to be collapsed, meaning that I just see one border of two neighboring cells. I've also added a padding. I don't want my content to be too close to the border, and the padding makes sure that some spacing is added. So note that this style is applied to both the table and the td, and this is the result. This looks a lot nicer. We now have a collapsed border of 1 pixel. The images are not placed directly next to the border, there's some padding added, and you can also see the padding added for the text. I think this is a good way of representing all the pies currently available in Bethany's Pie Shop. Now, while we're working on this page, this also includes a nicely‑styled header as well. I've added a header within there in h1, so that will be the main heading of the page. I then also created a new style which is using some letter spacing to make the different characters appear a bit further apart. And if you take another look at the page, well, that looks really nice.

More Options for the Table
Now that we have the detail page already in a working state, let's take a quick look at other options which exist for the HTML table. In a table, it is possible that a cell spans multiple rows or columns. Let's first look at multiple rows and take a look first at the image. What you want to achieve is that the image spans two rows. In other words, that first cell, so the first td, will span two rows, I can do that using the rowspan attribute on the td and set its value to 2. Of course, the net result is also that in the second row, we only need to display one single cell. The cell of the first row also appears as part of that row. Something similar is possible using colspan. You see that the description now spans two cells horizontally. I use the colspan and set it to 2 again. This row will now have one single cell that spans the two columns which we have in the first row. The table has a few other elements we can make use of. The thead, as the name implies, can be used to create a header within the table. It is just used to indicate what will be the header of the table. The tbody, again an optional element, is used to wrap the actual content of the table. Tfoot is another part of the table that can be used in combination with it. This is used to wrap like an overview of a summary. Imagine you're building a table for a shopping cart. The tfoot can be used to show, for example, the total. Finally, the caption, another optional element, can be used as a caption for the table. Just like the face caption, it can be used to provide additional information, for example, what data we're looking at. While we're at it, let's look at some common properties we'll use for our table from CSS. You've seen the border before, and while it's possible to set it from HTML, it should also be controlled through CSS. You can see how I've defined the border for the table, the table header and the cells, so the tds. Sizing rows and columns is also possible from CSS. Here, I'm setting the height through CSS. Here's another interesting one. I can add a hovering effect on my table quite easily. Notice the use of a pseudo class again using a colon. So by adding :hover on the tr to the row, I can now add a hovering effect.

Demo: Completing the Table
Let us return to that demo and complete the work on our table, and we'll bring in styles using CSS again, and let's first add the caption. Using a caption in the table, we can specify information about the content being displayed in the table, so this gives some extra information about the data we're looking at. So to add a caption to the table, use the caption element, of course, within the table element, and the result, you can see here at the top of the table. Currently, our table also has no header information. We could simply add a new row above all the data that contains header information. Now, while that would work, it's actually a good idea to include a head in the table, and we're going to do that using the thead. Note that the thead element itself is not even required, but it's used to let the browser know what is actually the header of the table. So again, this element is itself optional. More important is the data we want to display within the head, and we can do this again using a plain tr. We could, in fact, use a td in here as well, but there is a specific type of element, the th, so the table head element that we can use to indicate that the cells contain header information. So I'm using here a th, and in there, I can specify what we're looking at. The first column will contain the image, the second column contains the pie name, then the description, the price, and then details. If we now look at the result, we can see that the headers have been added, and because of the fact that we're using a th element, the browser makes them bold. If we would have used a plain td, we could, of course, have applied our own style as well. Now do notice that the vertical separators aren't there. Any idea why? The answer lies again in the style. If you go back to the styles.css, notice that I've applied this style on the table and the td, but not on the th. It's an extra element, and I want it to behave the same. So I add a th here indicating that this style should also be used for the table header, and now this looks okay again. Now while optional, again, I could surround my trs, so the actual date of my table with a tbody. So when I add the tbody, I'm indicating that this is actually the body content of the table, and so I moved in all my data within the tbody. I've also placed the closing tag at the bottom. Of course, visually, this has no difference whatsoever. Now, there's one more thing I want to show you here. I'm going to hide the thead, I'm going to put that in comment, and I'm going to show you the use of call spans in a table. I'm going to create another row, and I'm going to specify that I want to have just one td. I'm going to say that the call span should, indeed, be 5, and then in there, I'm going to put just some text, and let me to make things clear, also hide the caption here, and there we go. We now see, indeed, that the text is showing in a cell that spans five columns. Now, what would happen if I specify four because now all my rows have an equal amount of tds. Well, let's try. I'm going to set this here to 4. There is simply no fifth table data in this first row. We only have four, and that's perfectly okay. You can have a different number of columns per row in a table in HTML.

Summary
We've reached the end of another module, and we now have a second page ready. We've used this to learn more about the table which is used to display a grid, a table of data. The table is added using the table element. Adding a row can be done using the tr and adding a column is done using the td element. I've also discussed that tables are used to display tabular data. They shouldn't be used as a way to create a layout for our page. It was something that happened frequently in the past. Finally, we've looked at using CSS in combination with our tables too. In the next module, we'll focus on yet another page, namely the detail page, and while doing so, we'll learn about a lot more elements that come with HTML. See you there.

Designing the Pie Detail Page
Module Introduction
Welcome to yet another module in the Building Websites with HTML and CSS course here, on Pluralsight. We already have a couple of pages now that look quite nice. If you have been following along, great job. This new module is entirely devoted to creating yet another page, the detail page, for one of the pies we have in Bethany's Pie Shop. While creating this page, we'll come across quite a few things that we haven't covered yet. So let's dive in and learn. First, again, a small overview of what we will be covering in this module. That is always a good way to start things. I'm going to first dive a bit deeper in how the browser works with inline and block elements. And then secondly, we're going to be looking at some more of the inline elements that come with HTML. We'll be using quite a few of these while creating the detail page. Then, we'll cover yet another new feature, lists. So far, we haven't been using these, but we need to create a few on the detail page to list the ingredients of a pie. Finally, we'll extend the page on the site with the use of some special characters, such as a copyright symbol.

Understanding Inline and Block Elements
But first, as promised, I'm going to return to the discussion we already had earlier briefly about inline and block elements. You've already looked at this slide before. Basically in HTML, elements have a default way of being displayed when they will be positioned on a page. This was the old content model used before HTML5, and although we now have a new content model more focused on the content that is, the way that these elements behave hasn't changed. Inline elements refer to those elements that don't start a new line. They will be placed on the current line and take up only as much space as they need. They can contain text or other inline elements. The span, which we will look at in this module, is a good example as it will be used to add formatting on the text it contains. The b, so bold, the anchor, and the image are other inline elements. Block elements, on the other hand, start a new line when added. They try to take up as much space as possible horizontally. Heading, divs, section paragraphs all belong to this group. To make this behavior a bit clearer, let's take a look at this. Here, we see a group of inline elements confined within this blue rectangle. The behavior of inlines when added is that they will just continue to flow from left to right until there is no more available space, and when that happens, they will jump to a new line. Now imagine that the blue rectangle are, in fact, block elements itself. When we add blocks, they will jump to the next line, even if there is space left. That is the big difference between these different elements. Through the use of CSS, we can influence how we position items, and we have already covered that a bit in the previous modules.

Working with the Different Inline Elements
Now that you know about the difference between inline and block elements, let's now focus on the creation of the detail page, and to do this, I'm going to use several other inline elements. A group of the inline elements that come with HTML is specifically targeted to give a special meaning to text, such as putting an emphasis, highlighting a quote, and so on. Some of these will have a default visual effect, but not all of them will do this as we'll see in the upcoming demo. Of course, we can then, again, use our own style to apply a different visualization. However, screen readers can use this information also to put more emphasis on the given text. As mentioned, quite a few of these exist. The em element is used to emphasize certain text. The mark element is used to, well, mark text to highlight importance. This could be used to highlight, for example, a search result in a list. The q element is used to define a short quotation. The s element is used to point to text that is no longer correct in a document. The small element, well as the name implies, be used for extra content, but placed in small characters. Finally, the strong element is also used to put an emphasis on a certain piece of content. HTML contains more inlines than shown here, but I don't believe it is useful to look at all of these here. We'll use some artists in the demo as well. Here was a small example of how we use these inlines. I'm using the mark here. You can see the result on the right. Mark is one of those elements that actually does have an effect in the browser. You can see that the text is highlighted. We can, however, use CSS again to change this default behavior. One other element that I haven't touched upon is the span. The span basically has no meaning, but it is used to contain text, and then using a style, we can format the text. Since the span has no semantic meaning, it is very similar to the div, however, the div is a block element that will just start a new line, whereas the span is an inline.

Demo: Creating the Pie Detail Page
Let's go to the first demo of this module where we will create the detail page. We'll then also use several of the inlines we just looked at to create the content of the page. To save us some time, I've already gone ahead and created the Apple Pie page. It is based again on the template that we created in the previous module. On this detail page, I've used a couple of inline and block elements, and I'm going to show you that in just a minute. If you look at the page, you see that I have a heading, an image, and then I have this block here that contains all kinds of elements that'll take you through to show the description of the pie. So let's take a look at the code for this page. So the actual content displays in this div here. I show the price, and I use a strong element here to emphasize the price. It will, by default, make it a bold. I'm using a strong element here to let the browser know that this is important information. The price is, indeed, typically rather important. And because of the fact that I've used the strong element here, the browser made this bold. We could, of course, overruled this and apply our own style. Then I've used a heading, Description, that you already know. Then we have the first paragraph, and notice that in there, I'm using the em element. The result of this em element is that this is being emphasized. The text all‑American traditional apple is made italic, so the em tag is used to emphasize a part of the text. Now, it's important to note here is that the em element is used within this paragraph. And although I've surrounded that part of the text with an em tag, it is not going to create a new line, it's an inline. Indeed, the em element is a typical inline element that is used to highlight, emphasize part of the text, in this case, and it's doing that inline. The strong element is then used again in this second paragraph. The everyday is made bold again using the strong element. Now strong is, therefore, also an inline element. Now, if you don't want to add semantic meaning to part of the text, we can easily use the span. The span is like a generic element, an inline element to be clear, it allows me to style part of the content. Here, I'm actually using the span to specify a color and a font weight on part of the text. Again, no new line is added. It's an inline element. It is like the godfather of all inline elements. I've used for once here an inline style. Of course, we can use a CSS style here too. Next, you see this little quote here for Bethany. This quote is actually coming from this blockquote element. As the name gives away, the blockquote element allows us to highlight a quote, a citation. This is actually not an inline, it's a block element. It will automatically go to a new line just like paragraphs do, so it automatically jumps to a new line without us having to write a line break in between. Down here at the bottom, I'm using the small. The small is used to indicate, well, the small print. I have some disclaimers that I want to add here, and I do that using the small element. Again, the browser does some default styling by making this text smaller, and you can also see that I have CO2 with 2 as a subscript. That we can do using another inline, and indeed, the sub‑element. So as you can see, there are quite a few inline elements that we can use and apply on text in our HTML pages.

Creating Lists
With the detail page under construction, the next part we need to add is the list of ingredients. Therefore, we need to learn how we can create a list in HTML. Let us look at that next. The concept of a list is very common. Lots of software applications and websites make use of it extensively. Think of a ToDo application that lists all the tasks you need to do. Think of the songs of the playlist you were listening before you started following this amazing course. Think of the ingredients in a pie. All lists, lists everywhere. HTML is, therefore, well‑equipped to support with several types of lists. In fact, it comes with three elements built in that allow us to work with lists. The ol element allows us to create an ordered list, a list with numbered items, that is. The ul, which stands for unordered list, allows us to create a bulleted list. Items within the lists are for both types of lists, by the way, shown using the li element, the list item. Here's a first snippet of a list, and I'm going to use the ol, so the ordered list. In between the opening and closing tag, replace the items of the list. Each item is shown again using an li. That item contains between its tags, the actual content you want to show in the list. And here is the result of that list. Since it was the ol element that we used, the list contains numbered items. Through attributes, we can change the default behavior of the ol element. We were first using the type attribute and it's set to a. Using a here means that the list will use characters as counting elements in lowercase. We can, for example, also use Roman numbering by specifying I. The start attribute can be used to specify where the counter should start. Creating an unordered list is very similar as you can see here. Instead of using the ol, we now use the ul element, and for the list of items, we can use the li.

Demo: Creating Lists on the Detail Page
Let us return to our detail page, and now add a few lists. At the bottom of the Apple Pie detail page, I now want to show a list of ingredients, as well as the steps used by Bethany's pie shop to create this pie. Let's see how we can do that using the ol, the ordered list, and the ul, the unordered list. Let's quickly add the h2, and I'm going to start by listing up the steps to create this pie. That is typically a process, a numbered list. For that, I will use the ol element. So the ol stands for ordered list, and every item I add will become a numbered item. All list items will be added using the li. So I'm adding the first list item here, I've pasted in some text that goes between the open and closing li element. If we look at the result, we can see some indentation is being done, by default, and the one is in front of this first list item. I've now added some more items to this list, and the result, we can see here. I now have a list containing a number of steps, and the ordered list defaults to using numbers, but we can change that. We can say here type and then specify the type of numbering we want to use, for example, uppercase letters. And now, we indeed see that our steps are numbered using A, B, C, and so on. I imagine that I have some extra content here, and I want to continue with numbering. I can then include another ol, so another ordered list, and I can specify that this one needs to continue numbering, for example, at step 5. And now we see, indeed, that our second ol continues numbering from 5. I also want to show a list of ingredients for the pie. Now, ingredients are typically not something that I want to number because well, there's no real order in there. So I'm going to use an unordered list, so let's bring in a ul. The individual items are also going to be of type li, so it's going to be the same list item for both ordered and unordered lists, so let's say that we require, for example, butter to create this pie, and there's our list of ingredients showing. Now I'm not a very good cook, far from it, but I have looked up that I also need these ingredients to create this pie. And so now, we see the result of an unordered list. We get a bulleted list of ingredients. Now what if I would need, for example, multiple types of sugar. I would like to create a sub‑list. Is that possible? Well, yeah. Let's take a look. I'll paste in a snippet. We can read in the list, create another nested list, which is what I'm doing here. So instead of adding an li element, I now add a ul element, another unordered list. And the result is that I get a second level of indentation within the first list, and I also get a different type of bullet.

Including Special Characters
In the final part of this module, let's take a look at working with special characters in our HTML code. Without paying too much attention in the last couple of modules, we have been using less than and greater than symbols. They are known to HTML, they're like a trigger to start or end an element, and they will be interpreted as such, but what if we want to place one of these symbols in the HTML or what if you want to include a special character like a copyright symbol or an ampersand? When we want to include these special characters, we'll need to use what is known as a character entity reference. These are sequences of characters known to HTML, so with a name. An example would be &lt;. That is the sequence we need to use to have in our HTML a less than symbol. The sequence will always start with an ampersand, then you see the code, so here it is lt for less than, and then a semicolon. Here are some more examples &gt is used for the greater than symbol, &copy is used to include the copyright symbol, and &phi is used to include the Greek pi character.

Demo: Adding Special Characters
In the final demo of this module, let us use these special characters in the footer. A couple of modules back, we added the footer and we have some copyright information down here at the bottom, but we don't have a copyright symbol. Let's add that quickly, and these special characters can be added using the character entity reference, so I'm going to type here that I want to include one of these characters, and I'm going to do that by first using the ampersand, then I use copy because that is the defined way of including a copyright symbol and then a semicolon. If we now look at the result here on the index, we can see that the copyright symbol, so the special symbol, has been included.

Summary
Our pie detail page is finished. Great work! We've used quite a few inlines here, in this module, to create it. Using these inlines, we were able to have fine‑grain control over the text we worked with. We've also looked at lists, so we've included list‑based content in our page. HTML comes with three list elements built in. The ol creates a numbered list, and the ul creates a bullet list. When adding items to either of these, we use the li. We now have several pages, but it's not possible to navigate from the one to the other. Let us change that in the next module where we'll add navigation.

Adding Navigation to the Site
Module Introduction
The internet is an amazing collection of billions and billions of pages, all of them connected with links so that anyone using the internet can navigate from page to page to page infinitely. But how do we create these things? Well, in this module, we're going to find out. Welcome to this module, Adding Navigation to the Site, part of the Building Websites with HTML and CSS course here, on Pluralsight. Let us dive straight in. As always, a little overview to see what we are going to learn in this module is in place. First, we'll need to learn about the thing that actually make it all work, the link. I will start by explaining how we can create them and how they actually work, how we can use links to jump from page to page. We'll also need an actual navigation part in our site probably at the top. That's what we will be doing next. And finally, we'll look at some other options we have to work with links.

Working with Links
So let us start learning how to work with links in this first part. So far, we have created a few pages, but isn't the site supposed to be a group of connected pages the user can navigate between? Of course, it is, and we don't have that yet. That we can get by adding links to our site. The element that makes all this goodness possible is the <a> anchor tag. Using a link, users can jump to another page within our site or to a page on another site or server. You can also, as we'll see further in this module, use a link to jump to another place in the document, so using a bookmark. Links can also be used to open a larger version of an image thumbnail. The link is rather a simple HTML element that requires a closing tag. And once the link is added, the content between the opening and closing tag becomes clickable using the mouse or touch input when touching the screen. The content will very often be text, but it can also be an image or even an entire block, such as the article. In the past, links on the web were typically blue and underlined. That is now a bit, let's say vintage as we use styles to start the links in the way we want. The format of the link is pretty straightforward. All links are created using the a element. As mentioned between the open and close tag, we'll put content that becomes clickable, and this can be pretty much whatever we want it to be. The a element has to be closed for it to work. Again, in the open tag, we will place attributes that influence how the link will behave. Here is an example link. In order to work as a link, the open tag needs to have an href attribute. If we don't include it, the link simply won't work, and we won't be able to navigate. The href attribute, which stands for hypertext reference, points to the page that clicking the link will take us to. Here between the open and closing tags, I have placed some plain text so that becomes clickable. You can see another example link. In between the tags, we now have an image. That image is now clickable. What I'm showing here is a very common pattern. We show in the page, by default, a small image often referred to as a thumbnail. When clicked, it will open a larger version of the same image for the user to see more details. In our demos, we have been working initially on the index page. The index is actually a bit of a special case. Well, now is a good time to take a look at this in some more detail. When our site is finished, we'll want to deploy it to a web server. Our site consists out of several HTML pages, the images and possibly other assets that we'll need to copy to the server. Then we can link a domain to our site, such as www.bethanyspieshop.com. Our index page will be the home page. That's the page we want users to see when they arrive on our site. Index.html is like a known page that, when available, will be used by servers by default, and we don't specify anything else. So a user arriving on the site will see the index.html. In the code of our page, we'll create a link to the pieoverview.html using the a element as you can see here. That is what is known as a relative link. The link points to a page that is in the same site as the current page. We don't need to add a full pod, so including the www here. However, since it's a relative link, when clicked, the browser is smart enough to understand that the target page is actually a part of the site and need to browse to bethanyspieshop.com/pieoverview.html. Now, before we go and add links in the demo, I want to briefly show you the additional attributes that you can use on a link. The target is often used. Using the target attribute, we can indicate how the target page will be opened. Several options exist here. _blank will result in the target page to be opened in a new tab or a new window. Other options are parent and top, but they aren't often used anymore. Self is another option here, that is the default, and it means that the link will be opened in the current window or tab. Next, the title attribute can be used to give extra information about the link, which can help in the target being discovered by search engines. Hreflang is not commonly used. It's use is specifying the target page language. Download is another attribute that is used to indicate that the link is used to start and download rather than navigating. Finally, the round attribute is used to specify the relationship between the current document and the linked document.

Demo: Adding Links
In the first demo of this module, we're going to introduce several links in our site. So far, we have been creating well, nice‑looking pages, but we haven't been able to navigate from the one to the next, and isn't that what our website is all about, the number of interconnected pages? Well, yeah. So let us now create links between the pages, and then we'll have a real website. So let's go ahead and do that. Now to save us some time, I've created a couple of new pages, and you can find them in the downloads of the course under the m10 folder. I've created cheesecake.html, fruitpies.html, and seasonalpies.html, all files which are basically created by copying the pie overview and have then removed the non‑relevant pies. So if you, for example, look at the cheesecake.html page, we can see pretty much the same list, but it is now showing only the pies in the cheesecake category, so we can use these now to create links between our pages. Alright, let me go back to the index.html, and I will start by adding some links here in the site, and I'll do it here, so below the header, and creating a link is done using the anchor tag, so the a, and the most important attribute on that is the href, which allows me to point to another page within the site or externally. So here, I want to link to the overview page, so the pieoverview.html. Now don't forget the closing element, and between the opening and closing tag, I then specified the text. That text is the contents of the link, and that will become clickable. Here we now see our link, All pies, and when I click it, it'll go to the pie overview page, exactly what I wanted. Now I actually need some more links, a list of links, let's say. I actually need to format this entire block a bit better. A list, that sounds like the work for a ul element, and I can then apply a style onto that so that I can now format my links easily. So I'm bringing in a ul first, and I'll already give you the class name so I can create a style in just a second here. I can now surround my link with this list item and move it, of course, inside of the ul. And now let us while we're at it, also create link to the other pages that I've added in my site. And let's now take a look at the result. At this point, it looks like a regular list, not really what I wanted. So I'm going to go back to my styles and I will bring in a style for the small menu. Here's the style I've added. Using list‑style none, we say that we don't want a marker in the list. Indeed, it is not a list where I want to see bullets or something. We want our items to be aligned in the center and also no padding is needed. This already looks a bit better. Now, I want to apply a style on the links. Now I'm not going to create a generic style for all links here since I want these to be more specific. So an element selector for all links wouldn't cut it. I'm going to make use of a combined selector here, more specifically, or the child selector. I'll specify that I'm targeting the links which are directly inside an li, which are then within the small menu class elements. See how this type of selector can make it easy to create a very targeted selection? Really cool. I'll then apply some formatting, including our custom font uppercase, and I'll separate them vertically using the line height, and if we look at the result now, wow, that's a big difference. And the Browse our pies still looks a bit off, and we did have a class attribute on there, but we don't have a style defined yet. Let's fix that. I'll begin another CSS rule. This isn't adding anything new. Let's look at the result. There, much better. See how we can easily make changes to the site's layout working on all pages in one go by changing just the CSS, really easy. The next thing I'll make into a link is this logo here. I want to make it clickable for users to go back to the index, so to the home page. Links don't need to just contain text, they can contain, for example, an image. So I can surround this image here with an anchor tag, so let's do that. So I've surrounded this image now with an a, the href will be the index.html, and the closing link tag is moved to after the image. The image still looks the same, but when I click it, you see that I'm actually navigating to the home page. And the image isn't nicely aligned yet, so let's add another CSS style onto that. I'll use another combined selector to target this image. It is inside of the left menu inside of an anchor, so I'll use a child selector again. And centering an image inside its container horizontally isn't always easy. An image is an inline so that won't center easily. Now we can ask, however, to display it as a block, and then we can use the trick we already saw with the auto margin and then it will center horizontally. The left menu now looks really nice. Let me quickly copy that to the other pages. You can do that too. We can now reach all the pages in our site easily. Now in the pie overview, I also want to be able to navigate to the apple pie detail page, so let's make this view details into another link. Let's go to the pieoverview and let's search for apple pie, that's this one, and then I will inside this td make the View details text also into a link. You can now see that when I click on View details, we'll navigate to the details page. Now while we're here, let's add another link that makes it possible to zoom in on this particular pie. Let's go back to the applepie.html page and here is an image inside of the figure and let us now surround this with another anchor tag. There we go. Let's look at the result. I'm zooming in to see the large picture. I actually want to make it possible to do this in a new tab or window, so on my link, I will set the target to blank. If you now click on this link, this will open the larger version, but in a different tab and the links we have created so far were all relative links. We are creating links to pages within our own site, but that doesn't have to be the case though. Let's go back to the index, and in the footer, I'll add another link and point to the Pluralsight website, and I have an absolute link that starts with HTTPS. It could also be HTTP. And we now look at the result, we can see here that the link gets created, and when we click on it, we will navigate to the Pluralsight website, that is now an absolute link.

Demo: Creating Bookmarks
Links are commonly used to navigate to another page, but they can also be used to navigate within the current page. This requires the use of a bookmark. Imagine that we have a long page, and we have content that resides in this article here. Then we create some sort of contents that allows a user to jump to the relevant part of the page. For this to work on the article tag, so the element we need to jump to, we need to add an id. Then in the contents, we can now create a link just like before. However, the href value of that link isn't another HTML page. Instead, it's an id of the article element prefixed with a hash sign. Now when clicked, the browser will reposition so that the article now comes into view, let us see how we can add a bookmark to our index page. So I'm here in the code of the index again, and this is the promos section, which I have already given an id promos. Now using the anchor tag again, I can create a link that will focus on this section, so let's scroll up again, and in the small menu. So in the aside, I want to create another link to that promos section. Now, in this case, I'm not going to link to a separate page. Instead, I'm going to link to a bookmark, and to do that, I need to indicate that this is a link to a bookmark, instead of a regular page. So I have to prefix that with the hash sign and then say promos. That's the name of the bookmark, so the id of the section, and then of course, between the opening and closing tag, I add some text for my link, and so I've called that promotions. Let's look at the result. Here's the link, so I can click that, and now it will automatically focus on the bookmark promos. This way, I can navigate within a document.

Demo: Adding Navigation to the Site
So far, we have created links, but we don't have real navigation in our site just yet. We need to fix that. A site without navigation isn't very user friendly, and we're going to do this directly in the demo. We're going to use a list, and we'll need to bring in some styles to create our menu at the top. While we're doing this, we're going to use pseudo classes we saw earlier on links too. In order to create some different visualization while hovering or clicking on the links. Let's dive in. So although we have links here at the left of the screen, so in the aside, I do want to complete the navigation at the top of the screen, so that's what we're going to do here. What I want to achieve is the number of links here in the top of the page, and we're going to put this navigation in the nav element. We already placed the nav element before in our page. The nav element is a semantic element that typically contains the navigation, so links to browse the site. This way, the browser, as well as screen readers, will understand that these are the links to follow, and to make my life easy, I could put in the links as you see here, just put in a couple of anchor tags with an href that points to the index page and the pie overview page, and yes, that would work. We need to do some styling to make our links appear correctly, but this might not be the best solution. The reason that I'm saying that is that a lot of frameworks that are often used to build websites use or prefer, let's say, a UL again, an unordered list, and in that, we place the links, and then on that UL, we apply styles. Because this is a very common thing to do, I will do that here as well. So let's remove these links again, and I'll bring in the links again in the form of a UL. There we go. We now have a ul, and it contains a couple of list items, one for the image, that's okay to put it in here as well, and then two for the links, so one to the home page and another one to the pie overview page. Let's look at the result. As you may have expected, this is going to create just a vertical list of links. That's really not what I want. I have to make it into an horizontal list of links. Also, I don't need to have the bullets in there. We've seen that already with the menu in the aside. We'll need to bring in some styles again. Like I said, that's also what a lot of UI frameworks, such as Bootstrap, will typically do. I've now brought in quite some styling code for the menu that you may not understand in full yet. That is also not the goal of this course, but let us go through it. Most of the added code is using child selectors again to apply to the UL, the list within the UL, and the links within the LIs. Here again, I'm specifying that I don't want there to be any bullets, that is the list style type should be none. Also, we overwrote the default margin and padding, and therefore, the LI items within that UL is specified that they should be floating to the left. In other words, they should be horizontally positioned next to one another, so floating left. And now finally, we apply also styling on the links within those list items. With that in place, our menu looks now exactly what we wanted it to be, a horizontal list of links that we can click. Now before you continue, as an exercise, update all the pages, such as the cheesecake page, to contain the menu. I'll do this also in the sample code you can download, so you know where to go if you need to compare.

Different Types of Links
To close off this module, I want to show you some more types of links you will come across when building websites. I've already touched on this briefly, but let's take another look. Links, as we have created them so far, including in the navigation, are always going to pages part of our site. They contain just the name of the page we want to open relatively to the location of the current page containing the link. The link is, therefore, not fully specified and points to a page within the same site. This is what is known as a relative link. Next, we can, of course, also have an absolute link where link includes the full address in the href value. This can then point to an external page, so on another site. Links can also point to files that will be downloaded. If you want to use it to download a file, such as a zip file or a PDF, you can use the a element. Now, in this case, the link won't be pointing to an HTML page though. Instead, it'll point to the file that then also needs to be uploaded to the server. When clicked, this will trigger the download of the file. If you want to allow the user to send an email, we can use a mailto link. In this case, the link starts with mailto, a colon, and then the email address. When this type of link is clicked, the default email program of the user's computer will open with a target address already filled in. Know that the links we create in this course are pretty simple. They point directly to a page. In dynamic websites, such as web shops, links can look much more complex. It will contain several parameters which are then used by the server to determine, for example, which products need to be retrieved. That however goes further than what we are covering in this course.

Demo: Adding More Links
In the last demo of this module, we're going to add a few more of these special links. We've already created quite a few links now, both relative and absolute links, but I'm going to create a couple more here. The first one I want to add is an email link, a mailto link that when clicked will open my default mail editor. So let's go ahead and add it here in the footer. Here's the footer of my index page, and of course, we need to add it on all pages again, but let's not focus on the index here. I'm going to bring in another paragraph, and in there, we'll add some text, Contact us, and then we're going to include the anchor tag, and the href is now going to be a bit special. Instead of just putting in the target page, I'm going to start the link with mailto and then I have the email address, and then between the open and close tag, I write the word email so that my sentence becomes complete. So by including mailto, this will become a special link known to browsers. Let's take a look. So here you see the contact us via email and it says here down at the bottom mailto info@bethanyspieshop.com, and when clicked, this will open my default mail editor with the email address already filled in in the to field. Now I also want to make it possible to download a file, for example, the menu with all the pies, so let's do that. In the assets for module 10, you'll find a folder called downloads. Drag it into the project in Visual Studio Code and make sure that you copy the folder again. Now you should see the downloads folder here containing the Pricelist and that's a zip file, so a compressed file. I want to create a download link to that file. If I want to create a download link to that file, I'll simply use the anchor tag again that now points to the downloads/pricelist.zip. When clicked, this will download the file to my machine. Let's write it out. So here you see the link, I can click it, and when clicked, the browser will not open anything. Instead, it will start downloading the file to my machine.

Summary
Another module in the books. The most important takeaway from this module is the anchor tag, so the a tag. Using the anchor, we can create links that allow the user to navigate from one page to the next. While links are, of course, used for navigation between pages, we can also use them to initiate an email or download a file. Don't forget about the target attribute. It allows us to open the link in a new window or browser tab, which can be useful if you want the user to keep the original tab open. That way, the user doesn't lose the context of what they were doing. In the next module, we will create another type of page, the contact page, and that will use a form. See you there.

Creating a Contact Form
Module Introduction
Our site is in good shape, but have you thought of an effect at this point, it is pretty much one‑way traffic? I mean, Bethany can share information about her pies, which is of course, the primary goal of a site, but what if visitors want to reach out? Of course, they can send an email. We've seen how we can create a mail link already, but a nicer and possibly safer way is to include a contact form. In this module, part of the Building Websites with HTML and CSS course here, on Pluralsight, we're going to do exactly that. Let's start by looking at the different topics we will cover. Now a form. Okay, what is that exactly? Well, I need me to start with that. I'm going to take you first on a tour of the HTML form to make sure you understand how it works. Once we know enough about the form, we'll start creating one, and in this area, we're going to bring in different inputs, basically different UI controls, let's say, to capture different types of data. Forms and inputs will have a default visualization. We can, again, change that to the use of CSS, and that will be the last topic of this module.

Understanding How Forms Work
So first things first. Let's get our head around what forms are and how they work. Like I mentioned in the introduction of this module, at this point, the site is pretty much one‑way traffic from Bethany to her visitors, and that is, of course, the main goal of the website. However, as a user, I should also be able to send data to the site. One place where this is useful is a contact form embedded into the site, instead of just a link to send an email to Bethany, but there are other places where I need to be able to send data that you may not have thought of. When I'm shopping on a website and I'm adding items to my basket, I'm also sending data to the site, which products do I want to order and how many items do I want to add to my basket or when I need to log into a website. Then the user is sending information like the username and the password back to the site. There are many other examples of this. I think you get the picture. All of this boils down to one single and rather simple HTML element we can use, the form. Using a form, we can capture user input in a web page. In the form, we use inputs. Then using the form, the captured information is sent to the server. Whoa, hold your horses. What did you just say? The information is sent to the server? And then what? Well, allow me to explain how a form really works. When we browse to a website with a form, HTML is sent that contains the form as well that arrives on the client, so in the browser, the user enters their information, and at some point, is already doing so. At this point, the user submits the form typically through a button inside the form. That's a trigger for the browser to package the data and send it along with a new request to the server. The server receives this and needs to process this. Now for this typically, code or script will run on the server and that processes that data. If it were a contact form that captured and sent data might be placed in a database. If you're adding an item to a basket, again, server code or server script will handle this. The actual code that runs on the server is beyond the scope of this course. Typically, this can be Node.js, .NET, Java, or PHP. In any case, real code needs to run on the server to process this data. Next, typically that same code will produce dynamic HTML surrendered on the fly on the server and that's then sent to the user again and displayed by the browser to the user. This could then be, for example, a confirmation that the contact data was well received.

Creating a Form
Alright. Now that we already know why we'll need a form and how they work, let us now start with the creation of one next, and we'll learn in this context about inputs too. First, let's look at how we can create a form. HTML comes with a form element, and you can see it here. It is definitely a bit different from what we've already seen before. As expected, it has an opening and closing tag, and we'll add different inputs in there to create our form in just a minute. Note that the form itself has no default visualization. You basically won't see a thing if you add this code to a page. There are a few attributes that require some special attention too. The action attribute can go first. As mentioned, when working with the form, the browser will send all the data, and we submit the form, and it needs to know where to send it to. That information we have here in the action attribute. This is the URL of the script or code that will handle the data on the server. The truth here .aspx, that would be a .NET page, but it could be a PHP page or something else. Again, that is beyond the scope of this course. Next, we also have the method attribute, and that's going to instruct how the data is going to be sent to the server. Typically, post is used like we're doing here, but that's not always the case. Finally, we have an ID, but that we've already seen. After creating the form itself, we can start with the creation of the contents of the form. So inside the form, we'll typically use inputs. An input will allow the user to well input data. It defines a type like your text that'll render into browser as a plain text input, a single line that is. We give it an ID and a name, and I have also added a value here for the placeholder attribute, which is the text that will be shown while the user hasn't entered any data yet. The input is just there to capture the data. We'll need some text label next to it to indicate to the user what they need to enter. And for that, I'm using the label here, and I'm using the for attribute. The browser knows that this is then linked with this input here. Finally, I've added another input, but look at the type, it is set to submit. This will be the button to submit the form and that'll trigger that the browser packages the data and posts it to the URL we have defined in the section attribute of the form. This is, of course, a very basic form still, and you can see the result of the HTML we just saw here. Everything is in one line and it looks basic. We'll come to that, but this gives you an ID of how this will render into browser. HTML comes with a set of built‑in input types. It's not my goal to show you a list of all of these inputs. Let's look at some of the most commonly used ones here. You've already seen the text and the submit. Text area is closely related, but it allows for multi‑line text input. The radio and the checkbox are two other inputs. The radio button allows users to typically make a selection between several options, whereas the checkbox allows the user to tick a selection. The select is used to create a drop‑down list for the user to make a selection out of a number of proposed options. Let us look at some more code here. Here, we can see the code for a radio button and a checkbox. If you think back of the input type is text, this looks pretty similar, right? The type is now set to radio and checkbox, and the browser will know how to render this correctly. Although it's already styled, the form that you see here is created with some of the inputs we've now already looked at. The first name, last name, and so on are the labels. Then I have a few text inputs for first name and last name. Then I have created a few radio buttons in a text area. And finally, I have the Submit button which will trigger packaging and sending the data to the server. Now, before we go to the demo, I want to show you briefly how the browser is sending this data. Through the use of the developer tools, you can see how and which data is being sent using the form. You can see that it's basically a set of key value pairs that's being sent. The server code will now receive this and can parse this and that can then, for example, be stored inside of a database on the server.

Demo: Creating the Contact Form
Alright. I bet you want to get started on that first form. Let's create the contact form, and instead of having server‑side code to work with the data, I'm going to include some code that will show us the entered data. We're going to create a new page, of course, which will contain the form. So we have our template.html. Let us copy that and rename the copy to contact.html. Now, our template is somewhat behind in terms of the menus and links that we've added, so I'll add the new navigation menu at the top of this contact page. So let's go to the index.html, and let's copy the main menu and paste it in here in the contact.html, and I'll do the same for the site. Now, we can focus on the task at hand and that is creating the actual contact form. In the main, let us first create the heading, so the title of the page. Alright, let's now create the form. For that, we're going to use the form tag. On the form, as we saw in the slides, we need to add a few attributes that are typically required for our form to work correctly. The method is the first one and it's typically get or post. Since we are going to be sending data entered by the user of our form in what is known as the body of the request, we're going to use post. Next, we also need to include the action which points to the file or script that will handle the incoming data as we saw in the slides. This will typically be server‑side code that can work with the incoming data. Now, since that is beyond the scope of this course, we'll set it here to the URL of the current page, and I'll give you a script in just a second that won't really do anything with the data, but it will show what was entered. So let's set the action to contact.html. Finally, I'll give our form an ID. Now we're going to add the different fields, so the capture data. I'm first going to add a field to capture the first name of the user, and I'm going to display that is what I want the user to enter there, and we could do this with plain text, but I'm going to use a label instead. Between the open and close tag, I set the text that is to be displayed. The for points to our input, which I'll add next. We want the first name input to be a regular text input. I've given it an ID and a name, and the ID is still the unique identifier we give to this element. Name is often used inside of a form and will be the key to identify the data that will be sent in. We'll see this later when we look at the entered data. Notice, I've also added the placeholder which will display inside the input as long as no text is entered by the user. Let's do the same for last name. Next, I'm going to allow the user to select an option in a list of choices using a radio button. A radio button is typically used to allow a single choice between a number of options. First, let's add the label again. Next time, add an input type is radio. The value is added here as well. That will be the value that is sent by the browser to the server when this radio button is checked. I've also added checked here which is going to check this radio button by default. Yes, this is a bit of a special syntax. It is not required to use the key equals value syntax here. Then this label will show the text next to the radio button just like we had with first name and last name. Let me bring in the other options. These are similar. Note, however, that the name is the same for all radio buttons. This way, the browser knows that these should work together, and in fact, only one of these options can be checked at the same time. Finally, let's add a text area to allow the user to enter a long question, which can span more than one line. The text area is not an input. It's a separate element. I've added a height here too to make it possible to see multiple lines of text in one go. Now, we only need to allow the user to submit the form, and for that, I'm going to use an input type is submit. When this is inside a form, this will trigger the submission of that form. The browser will wrap all the entered data from the user and send it to the URL specified in the action. I think the first version of our form is nearly done. And before we run things, I'm going to add another link in my navigation in the index.html. And in fact, we should do so on all pages. Let me quickly do that here. Alright. Time to admire our work. There's a form and it looks okay, I guess. We can see the different inputs, the text inputs, the radio button, and the text area, and the button is also showing. Let me enter some data here. If you click the button, it will get an error which is normal here. Now, open the browser tools and open the Network tab, and let's add some data again. If you now submit again, you'll still get the same error, but you can see here the data you've entered, which is packaged by the browser and sent to the server. Now, we can fix the error with a small script. You can find the script in the snippets. The script should go at the very bottom of the page right before the closing body tag. If we now run the page again, we'll get a pop up that shows us the data we entered. You can see the data and also the keys of each entered bit of data. That was actually the name of the input that you're seeing here.

More Input Types
We now have used already the most basic inputs, but there are definitely some other interesting ones I want to include here. I've mentioned the select input type already. It'll render, as you can see, as a drop‑down list. Inside the select, I can add multiple option elements. Each option gets a value that will be the data that is sent by the browser again. In between the opening and closing text, we have the text that will be displayed in the drop‑down list item. Other interesting input types, we have them, as an input type is number which allows for numeric input only. This can be easy when we want to include a shopping basket on our site and when we want to allow the user to enter how many items they want to order. The color input is another one useful to allow the user to select a color from a palette. Input type is range, it's used to allow the user to select a value between two other values, so between a minimum and a maximum, this will render as a slider, by the way. Finally, the date input renders as a date picker for the user to select a date.

Demo: Extending the Form with More Inputs
Let us now return to our form and add some more inputs. We'll now extend our form. We'll add some more inputs. Say that we want to allow the user from our site to select a country from a list of possible options. They, too, can be used to offer the user to make a selection of a single option out of a number of choices, but visually, this may not be the best choice, definitely, if the list gets long. A better alternative can be to select, let's add one. The select is an element, too, just like the text area. Now we're going to bring in the options our users will be able to select. Each option has a value, that'll be the value that is sent to the server and a text, and that's what's between the open and close tag. That'll be shown on the screen. Before we look at the result, let's also bring in a date input. Admittedly, it might be weird to ask the user for a birth date in a contact form, but let's add it anyway. Finally, our form should also ask, of course, for the email of the user, and for that, we have an input type is email. There we go. Let's now look at the result again. We can see that the select renders as a list of possible options. Then the birthday date input renders as a calendar to select the date. The email, well, that shows as a regular text field; however, when we bring in validation logic, the browser will warn if the entered value isn't a correctly‑formatted email address. Now, at this point, our form still looks well, pretty unreadable. Let's fix that next.

Styling the Form Using CSS
Our form works, but it looks far from great. In the final part of this module, I'm going to bring in CSS to make our form look a lot better. Now, before we look at this in action, I'm going to talk briefly about a CSS property I haven't covered yet, and that is the border. The reason is that form inputs are typically enhanced through border properties, as you'll see in a minute. So first, let us discuss the borders. What you see here are a few typical border properties, the color, the style, and the width. The style has a few variations that I'll show you in just a minute. The width follows the shorthand syntax we've already seen. If we just include two values, the first value applies on the top and bottom, and the second applies on the left and right. That's what you see in the screenshot indeed. I said we have many options for the border styles, and you can see if you have these options. Solid, well that renders as a solid border, not a surprise there. Dotted and dash can also be used, and finally, we also see a double border. Through another property, the border radius, we can on all of these borders add a rounded corner, and we can see that here in the screenshot too. One more thing before we go to the demo, and that is the fieldset element. Typically used in a form, this element can be used to group related elements in a form. You can see that here in the screenshot. This fieldset can be added using the fieldset element. Inside it, we can add a legend tag, which will be responsible for rendering the caption of the fieldset. And using these as border properties, we can make this look really nice.

Demo: Adding CSS to the Form
Let's work on that. In the final demo of this module, I'm going to add a fieldset and legend. and then of course, we'll bring in styles we need to make the form look great. We will start by bringing in two fieldsets. The first fieldset will be used to visually group the contact information, so I'll add it here. Inside this fieldset, I'll now add a legend, and that'll be the title of the fieldset. Let's add another one for the other information. Visually, this will help us already quite a bit. The related inputs are now grouped, but still, we need to do some work to make our form look a lot better. Just like with other pages, we'll call in the help of CSS again. To save us some time, I'll paste in a snippet of CSS code, and I'll take you through that. First, I'm adding some padding for my form in order to give our form and its inputs some breathing room. Next, with this CSS rule, I'm targeting a set of inputs, the text, the date, and the email, and also the select and the text area. I'm using the comma‑separated notation so that all these will get the style applied. This style will set these fields to 100% width of the available space and add some extra padding. Then, I'm adding a border with a gray color, and it should be a solid border. There's a margin, and our custom font is also being used. This CSS rule here will apply on the submit button. The properties I'm using here should all sound familiar already. Apart from these, I'm removing the default border here, which will look nice, and I'm giving the button a more rounded corner. I'm also changing the cursor when hovering. Next, I have a style for the label, again, nothing special. And finally, I have these two rules for the fieldset and the legend. The fieldset is used for grouping, and I'm using a border here too with a rounded corner. Then the legend is using regular properties again. If we now look at our contact form, the result looks a lot better.

Summary
There we go. We've added a form to our site. The form is your gateway for sending data to the server from the website you are creating. The form element and the many input types are used to construct the form, and we have used TSS again to style the form. In the next module, we will include external set content using the iFrame. Stay tuned.

Including External Content Using iFrame
Module Introduction
In the previous module, we learned how we can create links. We can create links within our own site, but also to a page on another website. And we mentioned that we want to point the users to a video of Bethany's Pie Shop that we have posted on YouTube. We could create a link to the YouTube page, but then the user is off to another site, in this case, YouTube. Maybe that's not always what we want, so instead of creating a link, it might be interesting to include the external content directly into our own site. That's exactly what you will be learning in this module using the iFrame. And before we start using the iFrame, I think it's a good idea to start looking at what exactly the iFrame is. Once we have an understanding of it, we'll use it to bring our external content into our site.

Introducing the iframe
So first things first. Let's start with learning about the iframe. Using the iframe, as the name is giving away, we are in a page on our site going to create an area, a frame let's say, where content, hosted typically on our site, will be embedded. So the hosting page is a page on our site, and in there, we're going to embed another page that we would typically have needed to open in a separate tab or a separate window. With the iframe, we can just easily extend our own site with external content. Now, that sounds great that we don't have to do all the hard work of creating the content ourselves. Yes, while that is definitely true, some caution is advised. Since we will be hosting an external page that is not under our control, there may be security concerns. We don't know what the external page is doing really, and since that has been the cause of issues in the past, the iframe supports an extra attribute that allows us to control how the iframe executes. Here, you can see an iframe being used. As you can see, it's a simple element that has as its most important property, the src just like the image element. If you think about it, it is actually similar since that tool linked to an external resource we wanted to embed. Here, the iframe used will embed the Pluralsight home page into our own website. The iframe has a few basic attributes that we can use to control how the page will be embedded. Using the width and the height, we specify the area that the iframe will use, again, very similar to using an image. Using a style, an inline, or using CSS, we can control how it will be displayed. As I just mentioned, the iframe can cause security concerns. Because of this, we can, from the hosting page, put measures in place so that the embedded page will be constrained by the browser in what it can do. For this, you have the sandbox attribute. If we add it like so, the embedded page will be very constrained, which is the safest approach. If you want to allow some more permissions to the embedded page, we can specify this as you can see here in the second example. Allow‑forms would allow an input form to be posted in the embedded page.

Demo: Adding the iframe
Let us, in the next demo, add an iframe to our site. Let us now include or embed, I should say, external content so hosted somewhere on the internet into our page. For that, we are going to use an iframe. I've gone ahead and I already created this about.html page, as you can see here. I've also added the link in the menu everywhere. So what I'll now do is I create the iframe, and I can do that here myself and then point it to another website I want to embed. Now to make it a bit more tangible, I've decided to do the following. So we can go back, remove this iframe. I had already prepared and instead replace it with a code copy from YouTube. What you see here is in fact, just a plain iframe with a defined width and height and a source or an SRC attribute. The other attributes are more specific about the security. We also specify that we don't want a border around the iframe that makes sure it looks really as a part of our website. If we now browse to the about page, then we see the embedded YouTube video in our website. So the iframe makes it possible to include or embed external content into our website by including external content. Instead of creating a link to it, the user remains on our site and perhaps they will make a purchase in our shop more easily.

Summary
This was a brief module on learning about the iframe in HTML. Through this element, we can embed external content hosted elsewhere on the web into our site. Keep in mind that you aren't in control of the embedded content, and therefore, it can cause a security risk. In the next and final module, we are going to explore the JavaScript APIs that we can use. I hope to see you there as well.

Storing Data with JavaScript
Module Introduction
We have arrived at the last module of this course, but let's make it another great one. In this last module, we will look at how we can augment the experience our users will have with our site using JavaScript. It'll be possible for a user to mark a pie his favorite, and through the localStorage API, we'll store this information. Let's see how we'll do that in this module. And before we use some JavaScript, I think it's a good idea that I give you some background on working with browser API using JavaScript, and we'll start with that. Next, we'll then be doing this. I'm going to show you how to work with localStorage to store as set the user marks a pie as a favorite.

Introducing JavaScript APIs
So let's look first at JavaScript. The web is an infinite collection of websites, the one more complex than the other. Although I'm happy with the result of Bethany's Pie Shop, I hope you are too, by the way, the site is still a very simple website. It's a good example of a static site which consists out of HTML that is used to manage the content and CSS to apply styling. Next, a lot of sites are much more complex and offer a lot of interactivity. They are hardly a website even, they're more an application as they offer the user an interactive experience and is close to what they can do on the desktop, so they mimic a rich desktop application. Indeed, these web applications are offering a very rich experience in the browser. That's not possible using just HTML and CSS. The enabler for this interactivity is JavaScript. JavaScript is a programming language that enables developers to write code that runs in the browser, so a spawned websites. JavaScript has been around for many years, and it's a very popular language today. Pretty much every website out there is using JavaScript to offer a certain functionality varying from very simple things to show the current time to allowing sending email directly from the browser interface. Since the introduction of HTML5, now already quite a few years ago, JavaScript became officially a part of the HTML standard. Today, JavaScript is used by millions and millions of websites, or should I say, web applications. Google Maps relies heavily on JavaScript to allow the users to pan and zoom on the map. Outlook, the email service from Microsoft, offers a desktop‑like experience that gives users a rich email experience. Gmail does pretty much the same, and once many years ago, even one of the trendsetters to rely heavily on JavaScript to enable a rich experience in the browser. And a lot of sites, so anything from webstore to a timesheet web application also use JavaScript in some way or the other. Now don't get me wrong, web application doesn't have to be a large application in order for it to use JavaScript, even small websites can benefit from it. It's not the goal of this course to teach you all about JavaScript, that would take us way too far. We have many, many Pluralsight courses that dive deep into JavaScript. Now, you may be wondering how this ties in with the topic of this chapter, storing data. Well, let me explain. HTML defines APIs that we, as developers, can use to offer rich user experiences on our pages. Now, what's an API you may be asking. API stands for application programming interface. See it as an endpoint, an interface, something we can hook into. An API exposes or maybe I should say wraps complex functionalities and streamlines its use in a simple‑to‑understand way. Take, for example, the Geolocation API, so figuring out the physical geolocation of the device. I can imagine that it's not simple to do this, so this functionality is exposed to developers using a simple‑to‑use API. Using code, we can interact with the browser through these endpoints, these APIs. These APIs are built on top of JavaScript as well. As part of the HTML standard, several of these APIs became part of the standard and are just built in. Most of the modern browsers that our visitors will use today will support these APIs, and this way, we can offer very cool experiences. Interactions that we, as developers, build with just any API will be done using JavaScript, so that's where JavaScript comes in again. Over 100 APIs are now included, some are part of the standard while some are more loosely coupled. What are some of these APIs you may ask? Well, great question. I already mentioned geolocation. Using this API, we can figure out the location of the user or device through the browser. After giving consent, the browser will try to find out the location, and through the API, we can, in our code, get access to this information. The Storage API, which I will be using in this module, gives us access to store information persistently in the user's browser, and we can access that information later on again. Audio and video, available through the audio and video element in HTML, also have an API that allows us to write code that interacts with these elements and allows us to start playback, change playback speed, and much more. The drag and drop API allows us to create an experience where the user can pick up an element and drag it onto another part of the page. These are just a couple of examples with the most commonly‑used APIs. There are definitely many more to explore. As an example, we will use one of these APIs to show the interaction from HTML. Do understand that this requires, well, real programming. What I mean with real programming is that HTML is mostly markup code that we're writing. Writing JavaScript code is actual code and goes much further, so there's much more to learn. We will limit ourselves in this course to showing the interaction with one of these built‑in APIs.

Working with Local Storage
So let's do that now. And as said, we'll be working with the Web Storage API. Before we look at how we can work with the Web Storage API, a word on what it is. Websites often store information on the user's machine through a cookie. Cookies are small pieces of text which are sent from the server to the device and are stored by the browser. Through the use of cookies, we can stay logged in on our website. A site can remember our preferences and much more. When the user browses again to the site, so with every click that he or she will do, and when a new page is requested, the browser will send all cookies again so that the server amongst others knows who is making the request. So indeed, cookies go over the line constantly. Also, they are limited in the amount of data that can be stored. A maximum of 4 KB is allowed. When I was creating this course, someone asked me, do you actually know where the word cookie used in internet terminology, that is, actually comes from? Well, I did not and it made me look it up. I thought it was interesting enough to share this with you. According to Wikipedia, the name comes from the term magic cookie, which in UNIX points to a packet of data that is received and sent back unchanged. So that's in terms of functionality exactly the same as cookies for the site. Cookies are common and will be around for a long time, but there's also an API that we can use and allows us, as developers, to store information on the user's machine, and that is the Web Storage API. Using JavaScript code, we are able to store information as key value pairs. This information is stored by the browser and remains there until the user explicitly deletes it. So even after closing the browser, the information stays on the machine and can be later on retrieved again. More space is available than with cookies. Your JavaScript code can store much more than cookies. There are, in fact, two types of storage, localStorage and sessionStorage. LocalStorage does exactly as I just mentioned, while sessionStorage will be deleted by the browser when the tab or window gets closed. We will use localStorage here. Now, we'll look at this in the demo where we will write a little bit of JavaScript code. When we want to interact with localStorage, so when we want to store something, we'll need to get access to the Storage API first. Available through a JavaScript object called localStorage, it's a global object, and we can access it by invoking in JavaScript window.localStorage. LocalStorage offers us a way to store data through a function called setItem. As said, we will store data in key value pairs. Those you will need to pass to the setItem function. Once stored, we can also retrieve data, of course, otherwise, it wouldn't be very useful to store anything. This, you may have guessed already, can be done using the getItem function. If you want different code, delete an item, we call the removeItem function. The API offers us a way to check how much data we actually already have stored using the length property. And through the clear function, we can delete all data we have stored in one go.

Demo: Saving a Favorite to Local Storage
So let's now go to a demo where we'll see all of this in action. I'm going to extend our site to its own very simple JavaScript functionality that allows the user to save any given pie is his or her favorite, that we will do using the localStorage API. In the very last demo of this course, we are going to add some interactivity to our website, so we'll go out with a bang. Let me explain what we are going to do. We are, again, here in the Apple pie page, so the detail page, and in there, I want to make it possible for a user to indicate that this is a favorite pie of his or hers. Now, this we can't do just using plain HTML. That is plainly impossible. Remember, HTML is about the markup, the content. This is about interactivity. This is where JavaScript comes in. What I'm going to do is I'm going to include a button here. I haven't looked at buttons, they are part of the form controls. So here I'm going to include a button below the picture of the apple pie, so on the applepie.html. And in here, I have the text that says I can save this as a favorite. Next, I'm going to include another span, and I'm going to give it an ID. You'll see why I need this in just a second. I actually need a place to show that this is a favorite, and I'll do that in this span. So I've given it id favorite. There we go. Now, just adding this button doesn't do anything. I need to be able to invoke code so that when I click on this button, I want to invoke code, JavaScript code, that is. So what I'm going to do is I'm going to write an onclick here, and then I'm going to call a method save. Now, that method is not something that comes from the browser, it is code, JavaScript code, and I need to include and write myself. A JavaScript code is typically placed at the top of the page, so also in the head. So I'm going to bring in a script block here. So I just added the open and closing tag for script. Now in here, we'll write some actual code, so JavaScript code. I remember that we just said that when the button is clicked, we're going to call a method, a function called save. Let me write that function. By writing function save, I'm declaring a function global, meaning that I can call it from everywhere. Let's now write some code in that function. We are going to, when the user clicks on that button, ask the window localStorage to save that the apple pie is their favorite, so I'm going to use localStorage. And like I said in the slides, localStorage is a known object to the browser. This is a browser API that we can work with. So in localStorage, I can now ask to set an item, meaning I can create an item in the storage of localStorage, and I can give it a key and that will be, in this case, applepie. That is the thing I want to save. And I want to set this value to true when user has clicked on that button. So in other words, when the user clicks on the save button, I'm going to write in the local storage that apple pie is a favorite. Apple pie is the key, true is the value, and just writing that does not really make a lot of sense. I need to visualize this somehow. So I'm going to write some more JavaScript code and let me paste that in. Let me take you through this step‑by‑step. I've written more code, and I've attached that code to run automatically when the window loads. So when the window.onload triggers, this function will execute. Now, what do I do in this function? I'm going to first, find the element called favorite. The document.getElementById is a way in JavaScript to find an element of our HTML document object model. So basically, I'm asking JavaScript here to find our span. Once it does find the span, then we are going to check if the window localStorage exists, which it hopefully will. This is based on the browser. And then, we're going to get from the storage applepie. If that exists and returns true, then I'm going to update the HTML of favorite. So in other words, I'm going to write some text between the open and closing text of the span favorite. Now, it's definitely not my goal to teach you about JavaScript, but let's make sure that this works. So let's go back to the Apple pie page, and now you can see the button over here. When I click it, the value is going to be saved, but we don't see it yet because the code only executes when the page loads. If I hit refresh, we indeed see that the apple pie is now one of our favorites. That is the sentence that was added here because it found apple pie to be true. I can also show you this in the Chrome Developer Tools. If we go to Application and then click on localStorage, you can indeed see that apple pie is now set to true.

Summary and Course Closing
And we have finished this last module of this course. Let us conclude it with a short summary of what we have learned in this module. We have seen that there are quite a lot of browser APIs that we, as developers, can use to extend the functionality of our web pages. Quite a few of these APIs became part of the standard that makes it possible to safely use these APIs in our apps since modern browsers will support them. We've looked at one here, the Web Storage API, which allows us, through the use of JavaScript code, to store data on the user's machine. And with that, we have also reached the end of this course, and we should be proud of what we have created. We have a working website. Bethany, too, is really happy with the new website. Great work, team. I really hope you have learned a lot by following this course and that this will trigger your interest to build many new websites. I look forward to seeing your next masterpiece. Take care, and I hope to see you in one of my other courses here, on Pluralsight.