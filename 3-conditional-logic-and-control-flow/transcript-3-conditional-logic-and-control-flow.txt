Up to this point, our code has followed a single path, and for some things that's just fine; however, for most real‑world applications, our code needs to do something different depending on different values that are passed into it, whether from user input or from stored data. Let's use an example with our company directory. Amazon uses a color badge system to indicate the length of time people have been working at the company. When employees start, they have a badge outlined in blue. Once they've reached their fifth year, they actually get a badge in yellow. At the end of 10 years, this changes to red, and for year 15, it goes to purple, and at 20, it changes to the final color of silver. Now, how could we add this to our company directory? Now we could certainly go in by hand and update everybody's records every few weeks, but that is wildly inefficient. What if there was a way to get badge color based on the number of years the employee has been working at the company? Well, there is, but we'll need to use two different things to make this work, comparison operators and conditionals. Now, these are core concepts that you will truly use every single day when writing JavaScript. Now let's start first by looking at comparison operators. Now, I introduced the concept of operators earlier in the course, and these were the symbols that represent some specific actions that we will be taking on one or more values. Now the values are called operands. Now we have used two types of operators, assignment operators and mathematical operators. Now, if you remember, we were able to assign a variable the result of a mathematical expression, in this case, 2 + 3. Now in this case, the plus sign is the mathematical operator and the equals sign is an assignment operator. Now comparison operators are used to compare two different values. These expressions always evaluate to a Boolean value. Now we have three different types of comparisons that we can do with these operators. If an operand is greater than or less than the other, if the two operands are equal, or if the two operands are not equal. Now in this first example, you can see that since 10 is greater than 4, the value of the expression is true. And if you remember, these conditional operators always evaluate to a Boolean value. Next, you can see that since five is equal to five and we use the greater than or equal to operator, this expression also evaluates to true. Next, we will look at equality. Now I need to mention that JavaScript has two different types of equality operators. I'll be using the strict equality operators for these examples, but I'll be explaining the difference later in this module. In this example, I can check to see if the two different string values are equal. Since these are two different strings, this will evaluate to false. I can also check to see if two numbers are not equal to each other, and in this case since four and seven are not equal, this will return true. Now that we've learned about the basics of comparison operators, we can do powerful things with them. One of the things is conditionals. Now if we go back to our employee badge question, we could write logic to assign the proper badge color based on the number of years the employee has worked for the company. To do this, we will use two new keywords, if and else. These keywords are used in conditional statements. First, we can create a variable that we will use to store the badge color. Next, we can check to see if the employee has under five years of service. If so, we can set that color to blue, and we can write this all on one line. Now the code after the conditional won't be executed unless the conditional evaluates to true. Now we'll talk later in this module about what evaluates to true. In most cases, we don't write it on a single line, we use curly braces to define a code block that will get executed if the conditional evaluates to true. Now we can add as many statements as we want inside of this code block. While this gets us to the first badge, we have more that we need to check for. Next, we will put the two key words together, else if. If the first conditional evaluates to false, that first block will not be executed, it will continue to the next statement, which is else if in this case. Here, we can add another conditional. Now here, we will include checks for the yellow, red, and purple badges. Now if we get to this point and none of the conditionals have been true, what do we know? Well in this case, we know that they have been at the company for more than 20 years and they should have a silver badge. We can use the else keyword to signify this. It represents the code block that we'll execute if all of the other conditionals evaluate to false. Now you don't have to have an else block, but in this case, we need it to account for that last badge option. Now, over the course of this module, you will be diving in and learning even more about operators and conditionals, we have just touched the surface of what's possible here. We will wrap up the module by adding in these concepts to the company directory application that we've been building throughout the course.
So we've used mathematical operators a few times already in this course, so I just want to take a step back and review all the mathematical operators that you have available to you so you can feel comfortable using them in your JavaScript code. So let's jump right to VS Code. So here, within VS Code, the first thing I need to do is to create a new file. Now here within this file, we're going to go ahead and look at the different mathematical operators that we have available to us. So we'll start here with addition. And I realize this is pretty simple, we're just adding 3 and 2 together, so when I run this by hitting F5, we'll see that the output is indeed 5. But let's keep going because we also here can choose to add a positive and then a negative number. And in doing so, we're really kind of creating subtraction here, but 2 + ‑1 should give us 1. So if we run this, we can see that that is indeed the case. Now just like we used the addition operators, we can do the same thing for subtraction. So here is an example where we're doing 3 ‑ 1, and then we could keep going with this and do 1 ‑ ‑1, which should actually yield 2. So if I run this, we can see that both those values come back as 2, so that works probably exactly like you would expect. Now we have division. And here with division, we just use a /. So here, in this case, we can see 3 / 1 is going to return to us 3. And then we could go through and do 21 / 9. So this is not going to return a whole number, and so if we run this, we're going to see that we get 2.333 and so on, and so forth. So next, let's look at multiplication. So here in multiplication, we're going to utilize the * character, and so here 3 * 2 should give us 6. And then we'll do another example here of 3 * 3. So this just gives us a couple different examples here. And if we run this, we can see that we get 6 and 9, respectively, which is exactly what we would expect. Now, that gives us kind of the four basic operators, let's talk about some other operators that we have available to us. So in JavaScript, there are times when you want to divide and then simply return the remainder, so here, 9 / 2. So let me go ahead and hit F5 to run this, and 9 / 2 is going to give us a remainder of 1 because here it would be 4, and then there would be 1 remaining. Now we could also do this with a negative number. And here, if we were to log this out, we would actually get ‑3. So here you can see that we are able to get the remainder because, in this case, 7 would go into 10 one time, there would be 3 left. Now because we had a negative number to begin with, we're going to get back a negative remainder. Now, we also have an exponential operator here, so we can go through and say, for example, do 3 to the second power, and we do that with a double asterisk here. So here, if I were to run this, we're going to get back 9 because 3 * 3 = 9. But we also could go through and do an exponent that is negative, in which case, this would, when we run it, give us 0.5 because we're going to get 1 over 2 in this case because we're doing a negative exponent. Now there's one other thing I want to show you here, and that is I want to show you the increment and decrement operators. So here, I'm going to create a new variable called val13, we'll set it = 1, and then I'll use this syntax that you see here where I go ++ before the name of the variable. Now what this is going to do, in this case, because we're using two + operators, it's going to increase the value of the variable by one. So here if I run this by hitting F5, we can see that this does return 2 for val13 because we are incrementing the value. Now let me go through and let me do another one here which val14 will be 1, and then I'll use two ‑ signs. Now this is going to decrease or decrement the value by one. So if I were to run this, we could see that, indeed, that returns 0 because 1 ‑ 1 = 0.
So now we're going to dive in and talk at a deeper level about assignment operators. Now we've obviously been using the equals sign up to this point to assign a value to a variable, but, when you pair the information that we just learned about mathematical operators, we have some new ways that we can assign values, and we're going to take a look at that here. So let's just go ahead and jump right in to VS Code. So here within VS Code, the first thing I'll do is to create a new file. So here within this file, I'll just demonstrate the kind of assignments that we've been doing so far. We can just simply create a variable and then assign it a value using the equals sign, and that's true whether it's a string, a number, a boolean, or an object. In any case, it works the same way. But as I mentioned, when you pair this with the mathematical operators that we just learned about, we gain some abilities to do some different types of assignments. So, here, I'm setting val1 to be equal to 3. Now, in the next line, I'm using a new operator, += together. So here I'm saying val1 += 6, and you'll notice here in the comment right next to this, this is the exact same thing as saying val1 = val1 + 6, but we're able to do this with a lot less code using the plus and equals together. So, if we were doing 3 + 6, val1 should in this case equal 9, so, let me run it here, we'll see that indeed it does equal 9. So, let's look at another example because as you've probably guessed, we can do minus equals as well. So in this case, 2 ‑1 should give us, indeed, 1. Now, we don't just stop with addition and subtraction. We can do the same thing here for multiplication, so, 6 * 2, in this case, will give us 12, and we can go through and also do the same thing with division, so in this case, 10 / 5, so that would give us 2. Now this also works if we're utilizing the exponent, for example two to the third power in this case, which we can see that returned eight, or, if we're utilizing the remainder operator, we can do that as well. So here, we can see that if we divide 21 by 8, that the remainder that we get back is 5. Now I want to talk to you about the assignment when we're utilizing the increment and decrement operators. So here, this might work different than you would expect it to. So here, we'll set val7 = 10, and then I'm going to set val8 = val7, and then the increment operator. So, in this case, what do you think seven would equal? What do you think eight would equal? Well, let me go ahead and run it and let's see what it says. Well, in this case it says that val7 is 11 and val8 is 10. Now, for many of you, you might say that is the exact opposite of what I was expecting. So, let's quickly take a look at something that is found in the docs. So here, if we look in the MDN Web Docs, it says that if we use these increment and decrement operators in prefix, meaning before the variable, then the increment operator increments and returns the value after incrementing. So, in other words, if we were incrementing from one to two, it would go ahead and increment that and then it would return the number two, so if we were assigning it to another variable, it would get that value. However, if we use it postfix, meaning after the variable, then in that case, it will increment, however, it will return the value before incrementing. So, let's bounce back over to VS Code to understand that in practice. So here in our case with the example that we just did, because we're including that increment operator after the variable val7, it will increment 10 to 11, but it will actually return the number 10 to assign that to val8 before it does that. That's why val7 becomes 11 and val8 becomes 10. Now, if we were to go through and do it a different way, in this case we'll utilize the decrement operator before the variable, in this case when we run it, we can see that both of them are equal to nine. Because we put it in front of the variable, it's going to return the value after it decrements.
So now, we're going to talk about comparison operators. I introduced this concept in the first clip here in this module, but I want to dive in and understand these at a deeper level, and this is going to be essential before we dive in and start working with conditionals here in a few clips. So, let's go ahead and jump over to VS Code. So here within VS Code, you guessed it, I'm going to create a new file, we'll call this one comparison. Now, here, I want to go ahead and start with something that's fairly simplistic. I want to start off with the process of checking for greater than or less than with numbers. So here, we'll start off with a basic example where val1 will be equal to the expression 7 > 5. Now remember that any conditional expression is going to evaluate to a boolean value, so this could only be true or false, and in this case, since we know that seven is greater than five, this will return true. So when I hit F5, it does indeed return true. Now, let me show you another example. I wanted to show you that you don't have to use the parentheses that I've been using for these comparisons. In this case, though, it does make it a bit easier to read. So when we remove those parentheses, things kind of get crowded and it's a little harder to just glance at it and understand what we're doing, but here in this case, we're checking to see if five is less than or equal to three. Now, we know that five is greater than three, so this one should evaluate to false. So if I hit F5, we'll see that, indeed, this does evaluate to be false. Now let's start looking at the concept of equality. We're going to check and see if two values are equal. Now you'll notice here that I'm using three equals signs. This is what we call strict equality. Now, I'll explain later in this clip what the difference is between equality and strict equality, but in this case, since three is equal to three, when we run this, we should get a true value back, and indeed, we do. Now let me give you another example. Here, we'll check to see if true is equal to false. Now, as you guessed, that's going to return false because those two are not the same. Now in some cases we might want to check to see if things are not equal. So here, I have two strings that are not the same, even though they have the same letters, they're not the same case. So, in this case, we're going to check to see if they are not equal. Now we do that by utilizing the exclamation point followed by two equals signs. Now this is a strict non‑equality check. So in this case, I'll hit F5, and we'll see that that one returns true because those two values are not equal. Okay, let's keep moving forward here. Let's look at primitive equality. So here, I'm going to create two strings. They're both going to have the exact same text in it, and then I'm going to check to see if they're equal. Now, what do you think it's going to do? Do you think it's going to return true or do you think it's going to return false? I'm going to go ahead and run it and you will see that it does return true. Now the reason is because with primitives, we're going to just check the value, but things work different as we move into objects because those are passed by reference. So here I'm going to create obj1, which is going to be an empty object. I will do the exact same thing for obj2. Now, I'm going to check to see if these two are equal. What do you think it's going to return? Well, let me hit F5, and here, you can see that it returns false, it says they are not the same. The reason is because obj1 is pointing to a block of memory, obj2 is pointing to a different block of memory because I created a completely new object for each of them. Now, I want to show you though that if they are pointing to the same block of memory that it will return true, so let's do another example. Here, I'm going to set obj3 to be equal to obj2, and then I'll go through and see now because those two are pointing to the same object, if obj2 and 3 are equal, and when I hit F5 to run it, we'll see that indeed, that returns true because now those are both pointing to the same block of memory. Now, I teased earlier in this clip, this concept of equality versus strict equality, so let's take a minute and let's take a look at that. So in JavaScript, there are two different sets of equality operators. We have the two equals signs and then the exclamation point and equals sign together, and these are just the standard equality operators. However, when we're looking at three equals signs and then the exclamation point and two equals signs, these are the strict equality operators. So the latter requires that both the value and the type match. So let's take a look at this in action over in VS Code. So here within VS Code, I want to show you the difference between these two, so we're going to do two different comparisons here. I'm going to start off utilizing the standard equality check with a string that says 42 and a number that's 42, and then I'm going to do another strict check with the same two values. So what do you think it's going to return? Well I'll hit F5 here and you can see that the first one returns true and the second one returns false. Now the reason is with the first one, it starts off with a string. Now it's going to try to convert the next value to a string, it's going to take that number, which is 42, convert it into a string, which would be equal to the first. But with the second one, because they're different types, it's going to say no, that these aren't equal. Let me show you another example. So here, we'll take a look at the values of undefined and null. Well they both represent an empty value, but in this case they are different types, so, what do you think is going to happen? Well, if you guessed that the first one is going to be true and the second one's going to be false, you are again correct, because in this case, even though they both are empty values, they are of different types. So my recommendation for you is that you always use strict equality operators unless you fully understand the different behavior of these standard equality operators. In most cases, if you really are checking for equality, you care that the values and the types are the same.
So now, we're going to talk about falsy values, and this is something that is critical to understand before you start working with conditionals. Now your reaction to this probably should be, okay, what are falsy values? Well, let's take a look in the documentation. So here, from the MDN Web Docs, a falsy, which again is also sometimes written with an ey at the end, is a value that is considered false when encountered in a Boolean context. So JavaScript uses type conversion to coerce any value to a Boolean in contexts that require it, such as conditionals and loops. And if we were to actually dive in, there is a page in the docs that will go through and talk about all of the different falsy values that are included within JavaScript. So for example, we know that false evaluates to false, but there are other values that also will evaluate to false. So, you can certainly go in and review the docs, but let's also dive into VS Code to get an understanding of how this works in practice. So I'm here within VS Code and the first thing I'll do is to create a new file. So here within this file I'm going to start off with something that we haven't fully covered yet. I'm going to create a function that will enable us to test and see if something evaluates to being true, which is generally called truthy, or something that will evaluate to be false, which would be a falsy expression. So, let's take a look at some different values and we'll see if they ultimately evaluate to be true or false. Now we'll start off here with numbers, and we'll start off with just a basic one here, the number 0. Do you think this is going to evaluate to be true or false? Well, if I go in and run this, we'll see that this one does come back as false. So generally anything that represents an empty value will evaluate to be false, and we'll see some other examples of that here in just a bit. But anything that actually has a value, and that could be something that is either positive or negative, in these cases those values will evaluate to be true. Okay, let's keep moving forward here. Let's take a look at something that is not a number. What do you think this will evaluate to? Well, this one also evaluates to false. We also could take a look at a big integer, or BigInt. So if I were to do this, what do you think this would equal? Well, in this case because it is still a 0, even though it is still a BigInt, it's also going to evaluate to be false, but any BigInt that it has a value would evaluate to be true. Okay, let's look at Boolean, null, and undefined. So, first of all, we'll look at something that we've talked about before already, it is undefined and null, and then we'll also just evaluate false. Again, this one's kind of the given out of the bunch. But if I were to run these, you would see that both undefined and null evaluate to be false and false obviously also evaluates to be false. So let's keep pushing through here. So here we're going to take a look at empty strings, as well as strings that actually have a value, and I'm going to do something here that is an important thing to understand, and that is a string that says false. So I'm going to run all of these by hitting F5, and we'll see that val9, which is the empty string, evaluates to be false. So if you're checking to see if a string has a value, you can simply evaluate it as a Boolean and it will come back as false if there's nothing in the string, if it's just an empty string. But any string that has a value will return true, even if that string is the word false. So you do have to be careful here if you're letting users do something like inputting values, which we'll see at the end of this module. You can't simply evaluate a string for true or false and expect that it will return the correct Boolean value. Okay, so let's push through with a couple of other items here. So here we have objects. And in this case we're just going to do an empty object. And so if I were to run this, we would see that this one comes back as true. So if it's a valid object, it will return true. But let's look at another use case, and this is one you've probably seen before because we've covered it here within this course, and that is an undefined variable. Now we did learn that undefined variables truly return undefined if you evaluate them, so since we've already seen that undefined returns false here, we should see the same thing with this for val13. And indeed, that does come back as false. Now this is important because when we do conditionals we're going to evaluate expressions as Booleans and then that will determine which conditional we actually take. So an understanding of the falsy values within JavaScript is important to being able to work with conditionals.
We've finally arrived at conditionals, and I'm going to build off of the concepts that I introduced earlier within this module. So, let's not waste any time, let's just jump right in to VS Code. So here, within VS Code, I'm first going to create a new file. Now here within this file, I'm going to start off by creating a sample employee as a JavaScript object, utilizing the JavaScript object literal syntax, and we'll include several different pieces of information here. Now this is going to work in many ways like what we've done so far in this course. We'll have FirstName and LastName that are strings, a startDate that's a date, numYearsService, which is an integer, isActive is a boolean, and then a department and title that are both strings. I also want to revisit the example that I gave at the very beginning of this module, utilizing the Amazon badge system and the specific badge color. So here, I'm modifying this slightly just to check the values on the employee that we've created with the object literal syntax. We can go through and check that individual's number of years of service, and then assign the proper badge color. Now here, we're utilizing multiple conditions by using else if, and as a reminder, every conditional that we have included here will be evaluated to be a boolean, either true or false, and if that conditional is true, then it will execute the code within its respective code block. So here, we can see because we have an employee that has seven years of service, we should end up with a badge color of yellow, because once it reaches the first conditional, it will say employee.numYearsService < 5, well that is false, so it will not execute the code block that would assign the badge color to be blue. But with the next conditional, if numYearsService < 10, that would turn out to be true, so the only code block that would execute within this conditional is going to be the one that assigns the badge color of yellow, and we can see this if we were to actually log this out. So here, we'll get back the years that the employee has served, as well as their badge color. So, let me go ahead and hit F5, and we'll see that, indeed, we do get back seven years, and the badge color would be yellow. Now, one of the interesting things is we've only tested a single condition here in each of these different statements, but we have the ability to check multiple. So let's go ahead and look at an example. Let's say that you wanted to have a meeting for all of the employees that are in the engineering department that have been around for more than five years, and so you need to go through a list of all the employees and figure out which ones meet this criteria. Well, you could do a conditional like the one that I've listed here. So first, we are checking to see if the number of years service is greater than five. Now you'll notice here that we have a logical and operator, which is two ampersands. What this is saying is this overall conditional will only evaluate to true if the expression on the left and the expression on the right both also evaluate to being true. So in this case, we have an employee that is in the engineering department, and they have seven years of service. So, when I run this code, we should see that it does log out that the employee meets the criteria because both of these different conditions are true. So I'll go ahead and run, and we can see that, indeed, the employee does meet the criteria. But, instead of checking that both actually return true, we can utilize a logical or operator to check and see if either condition evaluates to be true, so, if one or more of those conditions are true. Now here, we actually have to pipe characters side by side, and that's what gives us our logical or operator. So let's say that we want to have a meeting with everyone who either has more than 10 years of service or their title starts with VP, for example. Now this particular individual has a title that is VP of engineering, so they would be included even though they only have seven years of service. So here, if I run this, we should see that we have another employee meets criteria log statement, and, indeed, we do. Now we also can check and see not if a statement in a conditional is true, we can check and see if it is not true, and if you've been following along, you've noticed that if we're ever checking for something to not be true, we utilize the exclamation point. And so here, maybe we want to check and see if an employee has full retirement, let's say in our company that means they had more than 20 years of service and their active status is set to false. So we can check for that here. We're utilizing a logical and operator, which is two ampersands, so what is on the left and the right both need to be true. So first of all, on the left, number of years service has to be greater than 20, and on the right it says not and then employee.isActive, so this would evaluate to true if the employee's isActive status is set to false. Now actually, for our employee, neither of these conditions are true, so we should not see this log statement if I were to go through and debug the code, which I'll do by hitting F5, and in this case we can see that we do not get a statement that is returned because both of those conditions evaluate to be false. Now, I want to show you a another example, and this is going to be a different use case here, we're going to start off with something that seems to be fairly basic, but I'm going to show you a different way that you can actually write this code. So let's say, for example, that we need to check and see what our annual bonus is for a specific employee, and let's say that at our company, if you have more than 10 years of service, you get $1000 for your annual bonus, and if you don't, you only get $500. Well you could utilize a basic conditional that you can see here to go through and do that calculation and assign the proper value on the employee object. However, we can utilize something called the ternary operator to write this in a single line of code. So here, we're going to integrate in our conditional. So here we're saying employee.numYearsService > 10, and then we have a question mark, so here is the way that this works. If our conditional evaluates to true, then the first value after the question mark is returned. However, if it evaluates to false, the value that comes after the colon is what will be returned. So, we have a much simpler way of writing a longer conditional that we have above utilizing the ternary operator, and this is one of the ways we can integrate assignment in with a conditional.
So now, we're going to talk about another use of conditional statements, and that is with the switch statement. Now in a minute, we're going to go to the documentation and review a definition because all elements of this definition are actually really critical to working with switch statements. However, I think it's going to help you out a bit if we go and actually create a switch statement first inside of VS Code. So, let's jump over to the editor. So here, within VS Code, I'll first create a new file. So here within this file, I'm first going to create the same Employee object that we had within the previous clip. And let me explain the logic that we're going to be implementing. So at this particular company that this employee works at, they are having an annual meeting. Now this annual meeting is going to be held at their main campus, which has multiple buildings. Now you'll be meeting at a different building depending on which department you're a part of, so we need to be able to effectively let employees know, so we need to write some logic to help evaluate that. And the way this is going to work is we'll have engineering and HR both meeting and Building 1. We'll have Marketing meeting in Building 2, while anyone else in the company will be meeting in Building 3. So we can implement this using what is called a switch statement. So here I'm going to start off by saying that we want to switch based on the department of the employee. Now the first case that we're going to look for is Engineering. And here, we'll say that we'll log the statement Meet in Building 1 if the employee is a part of the Engineering department. Now you'll notice here that we have a special keyword at the end of this called break, and what this is saying is that you're going to break out of the switch statement if you reach this point in the code. Now you'll see the same thing when we implement the logic for, first, Marketing, which in this case, we just need to change what building they're meeting in, which in this case will be two. And we can go through and do this for HR as well. And you'll notice that since it's meeting in the same building as Engineering, it's going to look identical to what we see. Now we also need to use the default keyword here because we need to create a scenario where if someone doesn't fit into any of the other groups, we know they need to meet in Building 3. So here we go. We've created a switch statement. But there are some things here that you need to understand now that you've seen one, so let's go take a look at the documentation. So here, we can see that the switch statement evaluates an expression and matches the expression's values against a series of case clauses. Now that's what we've seen so far, right? We've seen Engineering, HR, Marketing all have different case statements. Now notice the next part here, it executes statements after the first case clause with a matching value, until a break statement is encountered. So if you leave out break statements, it's just going to keep executing the next code, even if it's under a different case. Now also note the last part of this definition, the default clause of a switch statement will be jumped to if no case matches the expression's value. So let's jump back over to VS Code and see if there's a way, with our newfound knowledge of how switch statements work, to simplify the code that we have inside of our current switch statement. So here, what I want to do is I want to try to combine Engineering and HR so that I only have to actually log out the statement once that we're going to meet in Building 1. So here's what I can do. I can actually put two cases together because, if you remember from the definition, it's going to keep executing code until it gets to a break statement. Then we can put Marketing in a separate case after the break statement and it won't execute that. And then with the default statement, we'll include that as we did before for all of the other employees. Now if I go through and run this, we should see that both switch statements, both the first one and the second one here, both say Meet in Building 1 because we are an Engineering department. And indeed, that is what we get. And the reason that this works is because of a concept called fallthrough, so you will actually fall through to the next case unless you include a break statement. So as a reminder, if you're going to use switch statements, you need to be extremely careful about making sure that you include break statements where you want them to be, and you also need to have a default statement so you can make sure to catch anything that doesn't fit within any of the other cases.